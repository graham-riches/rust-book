08020000 l    d  .vectors	00000000 .vectors
080201ac l    d  .init	00000000 .init
080203e4 l    d  .text	00000000 .text
080420b8 l    d  .ctors	00000000 .ctors
08042114 l    d  .rodata	00000000 .rodata
0804bdf8 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .fast_run	00000000 .fast_run
20000000 l    d  .data	00000000 .data
20000000 l    d  .data_run	00000000 .data_run
20002504 l    d  .bss	00000000 .bss
200124f0 l    d  .tbss	00000000 .tbss
200124f4 l    d  .tdata_run	00000000 .tdata_run
200124f4 l    d  .heap	00000000 .heap
200128f8 l    d  .stack	00000000 .stack
200148f8 l    d  .stack_process	00000000 .stack_process
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 v5_rcp Beta - Release/STM32_StartupTx.o
080201ac l       .vectors	00000000 _vectors_end
0a037a00 l       *ABS*	00000000 SYSTEM_CLOCK
0002903f l       *ABS*	00000000 SYSTICK_CYCLES
00000000 l    df *ABS*	00000000 v5_rcp Beta - Release/thumb_crt0.o
08020342 l     F .init	00000000 memory_copy
08020358 l     F .init	00000000 memory_set
08020322 l       .init	00000000 ctor_loop
08020332 l       .init	00000000 ctor_end
08020338 l     F .init	00000000 start
08020340 l       .init	00000000 exit_loop
00000000 l    df *ABS*	00000000 network.c
080203e4 l     F .text	00000010 udpReceiveFromDiagnostic
080203f4 l     F .text	00000010 udpReceiveFromCcp
08020404 l     F .text	00000010 udpReceiveFromMc
08020414 l     F .text	00000104 udpReceive
20002528 l     O .bss	0000003c NETWORK_pkt_data_pool
20002618 l     O .bss	00000004 nx_first_unused_memory
20002dc4 l     O .bss	000005dc udpRxBuffer
200033a0 l     O .bss	000001bc udpSocketList
00000000 l    df *ABS*	00000000 system.cpp
08020af8 l     F .text	000000c4 checkStackUsage()
20003634 l     O .bss	00000064 threadMonitor
20003698 l     O .bss	00000001 stackOverflowFlag
2000369c l     O .bss	00000004 allThreadsRunningFlag
0804278c l     O .rodata	00000098 scbFaults
00000000 l    df *ABS*	00000000 command_line.cpp
200036a0 l     O .bss	00000078 CLI_menuCommands
00000000 l    df *ABS*	00000000 debug_menu.cpp
08021550 l     F .text	0000009c udpFunc(int, char**)
080215ec l     F .text	0000004c mutexFunc(int, char**)
08021638 l     F .text	0000001c debugLogPopHandler()
08021660 l     F .text	000001b4 wheelCalFunc(int, char**)
08021820 l     F .text	00000014 debugBoot(int, char**)
08021840 l     F .text	0000000e binMain(int, char**)
0802185c l     F .text	00000070 sramtestMain(int, char**)
080218cc l     F .text	00000028 framtestMain(int, char**)
080218f4 l     F .text	00000014 framinitMain(int, char**)
08021914 l     F .text	00000058 recoveryFunc(int, char**)
0802196c l     F .text	000000ec moveFunc(int, char**)
08021a58 l     F .text	00000014 articulationFunc(int, char**)
08021a78 l     F .text	0000000a helpFunc(int, char**)
08021a90 l     F .text	000000f0 navigationFunc(int, char**)
08021b80 l     F .text	00000048 systemFunc(int, char**)
08021bc8 l     F .text	00000020 waPosFunc(int, char**)
08021be8 l     F .text	0000009c nvmFunc(int, char**)
08021c84 l     F .text	0000003c logFunc(int, char**)
08021cc0 l     F .text	0000003c ccpUart(int, char**)
08021cfc l     F .text	000000dc imuMain(int, char**)
08021dd8 l     F .text	0000010c iocfgMain(int, char**)
08021ee4 l     F .text	000000a0 ioreadMain(int, char**)
08021f84 l     F .text	000000c4 iosetMain(int, char**)
08022048 l     F .text	00000244 cdm_main(int, char**)
0802228c l     F .text	00000072 pickFunc(int, char**)
08022300 l     F .text	0000004a homeFunc(int, char**)
0802234c l     F .text	0000003e launchFunc(int, char**)
0802238c l     F .text	00000062 prelaunchFunc(int, char**)
080223f0 l     F .text	000000c8 camFunc(int, char**)
080224b8 l     F .text	0000012c robotFunc(int, char**)
200037f0 l     O .bss	00000010 cliRingBuff
20003800 l     O .bss	00000200 cliRxBuffer
20003a00 l     O .bss	00000080 debugLogBuffer
20003a80 l     O .bss	00000080 CLI_enterThread::commandBuffer
20003b00 l     O .bss	00000008 iocfgMain(int, char**)::gpio
20003b08 l     O .bss	00000004 iocfgMain(int, char**)::GPIOx
20000000 l     O .data	00000078 MENU_commandsList
08043aa8 l     O .rodata	00000010 help
08043ac8 l     O .rodata	00000010 move
08043c78 l     O .rodata	00000010 prelaunch
08043b48 l     O .rodata	00000010 launch
08043ab8 l     O .rodata	00000010 home
08043a98 l     O .rodata	00000010 cam
08043ad8 l     O .rodata	00000010 pick
08043a0c l     O .rodata	00000010 articulation
08043c1c l     O .rodata	00000010 recovery
08043af8 l     O .rodata	00000010 cmdCdm
08043bb8 l     O .rodata	00000010 cmdIoset
08043c3c l     O .rodata	00000010 cmdIoread
08043ba8 l     O .rodata	00000010 cmdIocfg
080439cc l     O .rodata	00000010 cmdFraminit
080439dc l     O .rodata	00000010 cmdFramtest
080439ec l     O .rodata	00000010 cmdSramtest
08043b08 l     O .rodata	00000010 cmdImu
080439a0 l     O .rodata	00000010 cmdCcpuart
08043c2c l     O .rodata	00000010 robotCmd
08043ae8 l     O .rodata	00000010 cmdBin
08043b18 l     O .rodata	00000010 cmdLog
08043a1c l     O .rodata	00000010 cmdDebugBoot
08043b28 l     O .rodata	00000010 cmdNvm
08043bd8 l     O .rodata	00000010 cmdWaPos
080439fc l     O .rodata	00000010 cmdWheelCal
08043c4c l     O .rodata	00000010 cmdSystem
08043a58 l     O .rodata	00000010 cmdNavigation
08043bc8 l     O .rodata	00000010 cmdMutex
08043b38 l     O .rodata	00000010 cmdUdp
08043b80 l     O .rodata	00000008 ccpArgs
080439b0 l     O .rodata	0000000c ioreadArgs
080439bc l     O .rodata	00000008 launchArgs
080439c4 l     O .rodata	00000008 systemArgs
08043a2c l     O .rodata	00000004 framinitArgs
08043a30 l     O .rodata	00000008 framtestArgs
08043a40 l     O .rodata	00000008 sramtestArgs
08043a48 l     O .rodata	00000010 wheelCalArgs
08043a90 l     O .rodata	00000008 articulationArgs
08043a68 l     O .rodata	00000008 debugBootArgs
08043a38 l     O .rodata	00000008 recoveryArgs
08043a88 l     O .rodata	00000008 navigationArgs
08043a70 l     O .rodata	00000008 prelaunchArgs
08043a78 l     O .rodata	00000010 cdm_usage_list
08043b60 l     O .rodata	00000020 camArgs
08043be8 l     O .rodata	00000008 helpArgs
08043bf0 l     O .rodata	00000008 homeArgs
08043bf8 l     O .rodata	0000000c moveArgs
08043c04 l     O .rodata	00000018 pickArgs
08043b58 l     O .rodata	00000008 binArgs
08043b88 l     O .rodata	00000008 imuArgs
08043b90 l     O .rodata	00000008 logArgs
08043b98 l     O .rodata	00000008 nvmArgs
08043ba0 l     O .rodata	00000008 udpArgs
08043c5c l     O .rodata	0000000c iocfgArgs
08043c68 l     O .rodata	0000000c iosetArgs
08043c74 l     O .rodata	00000004 mutexArgs
08043c98 l     O .rodata	00000008 waPosArgs
08043c88 l     O .rodata	00000010 robotArgs
08043ca0 l     O .rodata	00000024 selectGpioPort(char*)::portArray
00000000 l    df *ABS*	00000000 debug_log.c
20003b0c l     O .bss	00000200 debugLogBuffer
20003d58 l     O .bss	00000004 printFunction
20003dc4 l     O .bss	00000004 subtaskSendFunction
20003dc8 l     O .bss	00000001 systemVerboseLevel
00000000 l    df *ABS*	00000000 log_buffer.c
00000000 l    df *ABS*	00000000 robot.cpp
00000000 l    df *ABS*	00000000 axis_base.cpp
00000000 l    df *ABS*	00000000 axis_multi_servo.cpp
00000000 l    df *ABS*	00000000 axis_single_servo.cpp
08023260 l     F .text	00000050 SingleServoAxis::executeCommand(unsigned char, unsigned char*, unsigned short) [clone .part.0]
00000000 l    df *ABS*	00000000 axis_multi_stepper.cpp
00000000 l    df *ABS*	00000000 axis_single_stepper.cpp
080238f4 l     F .text	0000002c SingleStepperAxis::executeCommand(unsigned char, unsigned char*, unsigned short) [clone .part.0]
00000000 l    df *ABS*	00000000 articulation.cpp
08044038 l     O .rodata	00000070 transitionTable
00000000 l    df *ABS*	00000000 ccp.cpp
08024020 l     F .text	0000002c CCP_processDataRequest.part.0
20003dcc l     O .bss	00000015 ccpCommand
20003de4 l     O .bss	0000000c ccpStateData
20003df0 l     O .bss	00000084 rcpStateData
20003e74 l     O .bss	00000005 responseMessage
20003e7c l     O .bss	000007e2 handler
08044164 l     O .rodata	00000007 CSWTCH.15
0804416c l     O .rodata	00000007 CSWTCH.16
00000000 l    df *ABS*	00000000 mcm.cpp
200046ac l     O .bss	00000092 handler
00000000 l    df *ABS*	00000000 cdm.cpp
20004740 l     O .bss	00000008 versionCdm
20004748 l     O .bss	00000001 flagVersion
2000474c l     O .bss	0000004c mutex
00000000 l    df *ABS*	00000000 nav_comms.c
20004798 l     O .bss	00000105 rxMessage
00000000 l    df *ABS*	00000000 bsb.c
200048a0 l     O .bss	00000001 flagVersion
200048a4 l     O .bss	0000004c mutex
200048f0 l     O .bss	00000008 versionBsb
00000000 l    df *ABS*	00000000 diagnostics.cpp
08025108 l     F .text	00000034 _GLOBAL__sub_I__Z21DIAGNOSTIC_initializev
200048f8 l     O .bss	0000012c handler
080442b8 l     O .rodata	0000001c CSWTCH.12
080442d4 l     O .rodata	00000007 CSWTCH.13
00000000 l    df *ABS*	00000000 diagnostic_message_functions.cpp
00000000 l    df *ABS*	00000000 comm.cpp
08025258 l     F .text	0000000a unsigned short endianSwapIfRequired<unsigned short>(unsigned short, COMM_endianOrder_e) [clone .part.0]
00000000 l    df *ABS*	00000000 antctrl.cpp
0802580c l     F .text	00000030 _GLOBAL__sub_I_ANTCTRL_thread
20004afc l     O .bss	00000034 taskManager
00000000 l    df *ABS*	00000000 attic_entry.cpp
0802583c l     F .text	0000016c ATTIC_ENTRY_errorStateMachine(unsigned long)
080259a8 l     F .text	0000029c ATTIC_ENTRY_mainStateMachine(unsigned long)
08025c44 l     F .text	000000d0 ATTIC_ENTRY_setup()
20004b4c l     O .bss	00000010 atticPositions
20004b5c l     O .bss	00000010 dynamicHomingTorque
20004b6c l     O .bss	00000004 staticHomingPosition
20004b70 l     O .bss	00000004 dynamicHomingPosition
20004b74 l     O .bss	00000014 handler
2000007c l     O .data	000000c0 stateTable
2000013c l     O .data	00000030 errorStateTable
2000016c l     O .data	00000020 config
00000000 l    df *ABS*	00000000 pick_bin.cpp
08025d34 l     F .text	000001bc PICK_BIN_mainStateMachine(unsigned long)
08025ef0 l     F .text	000000c4 PICK_BIN_setup()
08025fb4 l     F .text	0000006c logOverTorque(unsigned long, char const*) [clone .part.0]
08026020 l     F .text	0000029c PICK_BIN_errorStateMachine(unsigned long)
20004b88 l     O .bss	00000004 expectedBinState
20004b8c l     O .bss	00000006 pickRetryCounters
20004b94 l     O .bss	00000004 binDirectionPartialMask
20004b98 l     O .bss	00000004 secondChanceBinStateMask
20004b9c l     O .bss	00000014 config
20004bb0 l     O .bss	00000014 handler
20004bc4 l     O .bss	00000001 retryType
2000018c l     O .data	00000110 stateTable
2000029c l     O .data	00000030 errorStateTable
200002cc l     O .data	00000020 smConfig
00000000 l    df *ABS*	00000000 pick_bin_retries.cpp
0802630c l     F .text	00000100 PICK_BIN_RETRIES_errorStateMachine(unsigned long)
0802640c l     F .text	00000184 PICK_BIN_RETRIES_mainStateMachine(unsigned long)
08026630 l     F .text	00000010 _GLOBAL__sub_I__Z24PICK_BIN_RETRIES_runTask23PICK_BIN_RETRIES_type_tmP17PICK_BIN_config_tb
20004bc8 l     O .bss	00000008 retryHandler
20004bd0 l     O .bss	00000014 handler
200002ec l     O .data	00000060 returnAbort
2000034c l     O .data	00000050 highCenterPick
2000039c l     O .data	00000010 errorStateTable
200003ac l     O .data	00000040 retractAndAbort
200003ec l     O .data	00000040 secondChancePick
2000042c l     O .data	00000030 wideGrooveRobotStrike
2000045c l     O .data	00000060 ribPick
200004bc l     O .data	00000020 smConfig
08044c04 l     O .rodata	00000018 stateTable
08044c1c l     O .rodata	00000018 errorHandlerStrings
00000000 l    df *ABS*	00000000 placepick.cpp
08026640 l     F .text	00000090 PLACEPICK_errorStateMachine(unsigned long)
080266d0 l     F .text	000003dc PLACEPICK_mainStateMachine(unsigned long)
08026aac l     F .text	00000034 PLACEPICK_setup()
08026ddc l     F .text	00000010 _GLOBAL__sub_I_binTransactionRecord
20004be4 l     O .bss	0000003c pickHandler
20004c20 l     O .bss	00000004 cachedErrorCode
20004c24 l     O .bss	00000014 handler
200004dc l     O .data	00000030 errorStateTable
2000050c l     O .data	00000020 config
2000052c l     O .data	000000a0 soloPut
200005cc l     O .data	000000e0 fullPick
200006ac l     O .data	000000a0 soloPick
2000074c l     O .data	00000060 onAntPick
08044f04 l     O .rodata	00000010 stateTables
08044f14 l     O .rodata	00000010 turretCCPMapping
00000000 l    df *ABS*	00000000 place_bin.cpp
08026dec l     F .text	00000018 PLACE_BIN_setup()
08026e04 l     F .text	00000184 PLACE_BIN_errorStateMachine(unsigned long)
08026f88 l     F .text	0000014c PLACE_BIN_mainStateMachine(unsigned long)
080270d4 l     F .text	00000044 PLACE_BIN_teardown()
0802716c l     F .text	00000028 _GLOBAL__sub_I__Z17PLACE_BIN_runTaskm18PLACE_BIN_config_tb
20004c3a l     O .bss	00000001 retryHandler
20004c3c l     O .bss	00000010 binPullbackMonitor
20004c4c l     O .bss	00000001 torqueSpikeDetected
20004c50 l     O .bss	00000018 config
20004c68 l     O .bss	00000014 handler
200007ac l     O .data	000000b0 stateTable
2000085c l     O .data	00000030 errorStateTable
2000088c l     O .data	00000020 smConfig
00000000 l    df *ABS*	00000000 place_bin_retries.cpp
08027194 l     F .text	00000124 PLACE_BIN_RETRIES_mainStateMachine(unsigned long)
080272b8 l     F .text	0000013c PLACE_BIN_RETRIES_errorStateMachine(unsigned long)
08027494 l     F .text	00000010 _GLOBAL__sub_I__Z25PLACE_BIN_RETRIES_runTask24PLACE_BIN_RETRIES_type_tmP18PLACE_BIN_config_tb
20004c7c l     O .bss	00000008 retryHandler
20004c84 l     O .bss	00000014 handler
200008ac l     O .data	00000080 binPullback
2000092c l     O .data	00000050 shelfStrike
2000097c l     O .data	00000030 retractAbort
200009ac l     O .data	00000020 errorStateTable
200009cc l     O .data	00000040 binOnBin
20000a0c l     O .data	00000020 smConfig
08045180 l     O .rodata	00000010 stateTable
08045190 l     O .rodata	00000010 errorHandlerStrings
00000000 l    df *ABS*	00000000 attic_entry_homing_error.cpp
080274a4 l     F .text	00000098 ATTIC_ENTRY_homingErrorHandler(unsigned long)
20004c98 l     O .bss	00000010 atticPositions
20004ca8 l     O .bss	00000014 handler
20004cbc l     O .bss	00000001 errorAxis
20000a2c l     O .data	00000030 staticFailedStateTable
20000a5c l     O .data	00000040 dynamicFailedStateTable
20000a9c l     O .data	00000020 config
00000000 l    df *ABS*	00000000 robot_actions_api.cpp
08045214 l     O .rodata	00000004 powerAllAxes
00000000 l    df *ABS*	00000000 sm_runner.cpp
08027da0 l     F .text	000000b4 SM_RUNNER_setTimeout(SM_RUNNER_config_t*, SM_RUNNER_handler_t*) [clone .isra.0]
08027e54 l     F .text	0000005c SM_RUNNER_cleanupTimer(SM_RUNNER_handler_t*) [clone .isra.0]
00000000 l    df *ABS*	00000000 attic_exit.cpp
0802831c l     F .text	0000016c ATTIC_EXIT_mainStateMachine(unsigned long)
08028488 l     F .text	00000054 ATTIC_EXIT_setup()
080284dc l     F .text	00000150 ATTIC_EXIT_errorStateMachine(unsigned long)
20004cbd l     O .bss	00000001 retryHandler
20004cc0 l     O .bss	00000010 atticPositions
20004cd0 l     O .bss	00000014 handler
20000abc l     O .data	00000040 errorStateTable
20000afc l     O .data	00000090 dynamicsRaisedRoutine
20000b8c l     O .data	00000070 dynamicsLoweredRoutine
20000bfc l     O .data	00000020 config
00000000 l    df *ABS*	00000000 movexy.cpp
08028674 l     F .text	00000328 MOVEXY_mainStateMachine(unsigned long)
0802899c l     F .text	00000030 MOVEXY_teardown()
080289cc l     F .text	00000008 MOVEXY_squareProgressEventHandler(void*)
080289d4 l     F .text	000002a8 MOVEXY_setup()
08028c88 l     F .text	00000124 MOVEXY_errorStateMachine(unsigned long)
08028df8 l     F .text	0000000c _GLOBAL__sub_I__Z14MOVEXY_runTaskP17COMM_CCP_moveXY_tmb
20004ce4 l     O .bss	0000001c cameraData
20004d00 l     O .bss	00000030 moveParams
20004d30 l     O .bss	00000001 cachedErrorCode
20004d34 l     O .bss	0000002c squareProgressMonitor
20004d60 l     O .bss	00000014 handler
20004d74 l     O .bss	0000000d moveCmd
20000c1c l     O .data	00000030 errorStateTable
20000c4c l     O .data	000000b0 moveWithCorrection
20000cfc l     O .data	00000080 moveWithNoCorrection
20000d7c l     O .data	00000020 config
00000000 l    df *ABS*	00000000 movexy_transition.cpp
08028e04 l     F .text	0000000c longDurationAlarmTimerCallback(unsigned int, void*)
08028e10 l     F .text	00000020 MOVE_transitionSetup()
08028e30 l     F .text	00000318 MOVE_transitionErrorStateMachine(unsigned long)
08029148 l     F .text	00000090 MOVE_transitionStateMachine(unsigned long)
20004d84 l     O .bss	00000004 cachedErrorCode
20004d88 l     O .bss	00000010 transitionHandler
20004d98 l     O .bss	00000001 movementDirectionAxis
20004d9c l     O .bss	00000014 handler
20000d9c l     O .data	00000040 stateTable
20000ddc l     O .data	00000090 errorStateTable
20000e6c l     O .data	00000020 config
00000000 l    df *ABS*	00000000 movexy_wheel_calibration.cpp
20000e8c l     O .data	00000004 xWheelConvergence
20000e90 l     O .data	00000004 yWheelConvergence
00000000 l    df *ABS*	00000000 bsmnt_exit.cpp
0802949c l     F .text	00000018 BASEMENT_EXIT_setup()
080294b4 l     F .text	0000017c BASEMENT_EXIT_errorStateMachine(unsigned long)
08029630 l     F .text	0000023c BASEMENT_EXIT_mainStateMachine(unsigned long)
20004db0 l     O .bss	00000001 cachedErrorCode
20004db1 l     O .bss	00000001 enableTurretMove
20004db4 l     O .bss	00000010 basementPositions
20004dc4 l     O .bss	00000014 handler
20000e94 l     O .data	000000d0 stateTable
20000f64 l     O .data	00000020 errorStateTable
20000f84 l     O .data	00000020 config
00000000 l    df *ABS*	00000000 configure.cpp
08029900 l     F .text	000001b4 CONFIGURE_mainStateMachine(unsigned long)
20004dd8 l     O .bss	00000002 stateHandler
20004ddc l     O .bss	00000014 handler
20000fa4 l     O .data	00000050 stateTable
20000ff4 l     O .data	00000020 config
00000000 l    df *ABS*	00000000 home.cpp
08029af0 l     F .text	000000a4 HOME_mainStateMachine(unsigned long)
20004df0 l     O .bss	00000003 ccpCommandFrame
20004df4 l     O .bss	00000014 handler
20001014 l     O .data	00000020 homingStateTable
20001034 l     O .data	00000020 config
08045b8c l     O .rodata	00000020 homingSequence
00000000 l    df *ABS*	00000000 full_home.cpp
08029c08 l     F .text	000000c8 FULL_HOME_mainStateMachine(unsigned long)
08029cd0 l     F .text	000000d0 FULL_HOME_topAssemblyStateMachine(unsigned long)
08029da0 l     F .text	000001ac FULL_HOME_bottomAssemblyStateMachine(unsigned long)
20004e08 l     O .bss	00000014 topAssemblyHandler
20004e1c l     O .bss	00000014 bottomAssemblyHandler
20004e30 l     O .bss	00000014 handler
20001054 l     O .data	00000050 fullHoming
200010a4 l     O .data	00000020 fullHomingConfig
200010c4 l     O .data	00000020 topAssemblyConfig
200010e4 l     O .data	00000060 topAssemblyHoming
20001144 l     O .data	00000020 bottomAssemblyConfig
20001244 l     O .data	000000d0 bottomAssemblyDefaultHoming
20001164 l     O .data	000000e0 bottomAssemblySafeHoming
00000000 l    df *ABS*	00000000 instant_home.cpp
08029fa8 l     F .text	00000178 INSTANT_HOME_mainStateMachine(unsigned long)
0802a168 l     F .text	00000024 _GLOBAL__sub_I__Z16INSTANT_HOME_run22COMM_CCP_homingModes_tmb
20004e44 l     O .bss	00000001 homingMode
20004e48 l     O .bss	00000014 handler
20001314 l     O .data	00000090 positionMap
200013a4 l     O .data	000000a0 instantHoming
20001444 l     O .data	00000020 config
00000000 l    df *ABS*	00000000 locate.cpp
0802a18c l     F .text	000000ac LOCATE_mainStateMachine(unsigned long)
20004e5c l     O .bss	00000003 deadReckoning
20004e60 l     O .bss	00000014 handler
20001464 l     O .data	00000050 stateTable
200014b4 l     O .data	00000020 config
00000000 l    df *ABS*	00000000 prelaunch.cpp
0802a2c8 l     F .text	00000198 PRELAUNCH_mainStateMachine(unsigned long)
0802a4dc l     F .text	00000010 _GLOBAL__sub_I__Z17PRELAUNCH_runTaskPvmb
20004e74 l     O .bss	00000002 prelaunchCmd
20004e78 l     O .bss	00000003 compoundMoveTypes
20004e7c l     O .bss	0000000c compoundMoveDistances
20004e88 l     O .bss	00000014 handler
200014d4 l     O .data	00000060 prelaunchOne
20001534 l     O .data	00000020 prelaunchTwo
20001554 l     O .data	00000050 prelaunchAbort
200015a4 l     O .data	00000040 prelaunchDirectToStageTwo
200015e4 l     O .data	00000020 config
08045efc l     O .rodata	00000010 CSWTCH.6
08045f0c l     O .rodata	00000010 stateTable
08045f1c l     O .rodata	00000003 compoundMoveAxes
00000000 l    df *ABS*	00000000 launch.cpp
0802a4ec l     F .text	0000003c LAUNCH_errorStateMachine(unsigned long)
0802a528 l     F .text	00000134 LAUNCH_mainStateMachine(unsigned long)
0802a65c l     F .text	000000c8 LAUNCH_setup()
20004e9c l     O .bss	00000010 atticPositions
20004eac l     O .bss	00000004 cachedErrorCode
20004eb0 l     O .bss	00000004 ccpCmd
20004eb4 l     O .bss	00000014 handler
20001604 l     O .data	00000010 errorStateTable
20001614 l     O .data	00000090 stateTableFromLAL
200016a4 l     O .data	00000070 stateTableFromSelfLift
20001714 l     O .data	00000020 config
00000000 l    df *ABS*	00000000 recovery.cpp
0802a77c l     F .text	000000a4 RECOVERY_mainStateMachine(unsigned long)
20004ec8 l     O .bss	00000001 recoveryTaskId
20004ec9 l     O .bss	00000001 recoveryDirection
20004ecc l     O .bss	00000014 handler
20001734 l     O .data	00000020 stateTable
20001754 l     O .data	00000020 config
08046010 l     O .rodata	00000008 taskFunctions
00000000 l    df *ABS*	00000000 recovery_move.cpp
0802a8c8 l     F .text	000001b8 RECOVERY_moveMainStateMachine(unsigned long)
0802aa80 l     F .text	000000fc RECOVERY_setup()
20004ee0 l     O .bss	0000001c cameraData
20004efc l     O .bss	00000018 recoveryHandler
20004f14 l     O .bss	00000001 recoveryDirection
20004f18 l     O .bss	00000014 handler
20001774 l     O .data	000000d0 stateTable
20001844 l     O .data	00000020 config
00000000 l    df *ABS*	00000000 recovery_no_move.cpp
0802aba8 l     F .text	00000124 RECOVERY_noMoveMainStateMachine(unsigned long)
20004f2c l     O .bss	0000001c cameraData
20004f48 l     O .bss	00000014 handler
20001864 l     O .data	000000a0 stateTable
20001904 l     O .data	00000020 config
00000000 l    df *ABS*	00000000 camera_calibration.cpp
0802ad08 l     F .text	00000004 CAMERA_CALIBRATION_cameraTriggerCallback(void*)
0802ad0c l     F .text	00000058 CAMERA_CALIBRATION_calibrateDirection(CAMERA_CALIBRATION_direction_t, unsigned long, bool)
0802ad64 l     F .text	000001b4 CAMERA_CALIBRATION_singleDirectionStateMachine(unsigned long)
0802af18 l     F .text	00000308 CAMERA_CALIBRATION_mainStateMachine(unsigned long)
0802b220 l     F .text	00000060 CAMERA_CALIBRATION_errorStateMachine(unsigned long)
0802b2a0 l     F .text	0000000c _GLOBAL__sub_I__Z26CAMERA_CALIBRATION_runTaskPvmb
20004f5c l     O .bss	00000014 mainHandler
20004f70 l     O .bss	00000014 currentDirection
20004f84 l     O .bss	00000020 measuredCalibrations
20004fa4 l     O .bss	0000002c distanceTravelledMonitor
20004fd0 l     O .bss	00000014 calibrateDirectionHandler
20001924 l     O .data	00000020 mainConfig
20001944 l     O .data	000000b0 mainStateTable
200019f4 l     O .data	00000020 errorStateTable
20001a14 l     O .data	00000050 movementConfiguration
20001a64 l     O .data	00000020 calibrateDirectionConfig
20001a84 l     O .data	00000070 calibrateDirectionStateTable
00000000 l    df *ABS*	00000000 torque_sharing.cpp
0802b2ac l     F .text	000000c8 TORQUE_SHARING_mainStateMachine(unsigned long)
0802b374 l     F .text	0000001c __tcf_0
0802b390 l     F .text	00000050 TORQUE_SHARING_tearDown()
0802b3e0 l     F .text	000000a4 TORQUE_SHARING_setup()
0802b604 l     F .text	00000074 _GLOBAL__sub_I__Z22TORQUE_SHARING_runTask17ROBOT_axisIndex_tmb
20004fe4 l     O .bss	00000001 calculationValid
20004fe8 l     O .bss	00000004 primaryTorqueAxes
20004fec l     O .bss	00000004 secondaryTorqueAxes
20004ff0 l     O .bss	00000010 secondaryAxisHomingTorque
20005000 l     O .bss	00000014 handler
20005014 l     O .bss	00000040 monitors
20005054 l     O .bss	00000001 multiAxis
20001af4 l     O .data	00000040 stateTable
20001b34 l     O .data	00000020 config
00000000 l    df *ABS*	00000000 self_lift.cpp
0802b698 l     F .text	00000098 SELF_LIFT_errorStateMachine(unsigned long)
0802b730 l     F .text	00000278 SELF_LIFT_mainStateMachine(unsigned long)
0802b9a8 l     F .text	000000dc SELF_LIFT_setup()
20005058 l     O .bss	00000002 selfLiftCommand
2000505c l     O .bss	00000004 staticHomeOffset
20005060 l     O .bss	00000010 staticHomeTorque
20005070 l     O .bss	00000010 basementPositions
20005080 l     O .bss	00000004 dynamicHomeOffset
20005084 l     O .bss	00000014 handler
20001b54 l     O .data	00000020 abortStateTable
20001b74 l     O .data	00000020 errorStateTable
20001b94 l     O .data	000000b0 insertionStateTable
20001c44 l     O .data	00000020 config
00000000 l    df *ABS*	00000000 self_lift_homing_error_handler.cpp
20005098 l     O .bss	00000004 z8HomePosition
2000509c l     O .bss	00000010 basementPositions
200050ac l     O .bss	00000014 handler
20001c64 l     O .data	00000050 staticHomingFailedStateTable
20001cb4 l     O .data	00000080 dynamicHomingFailedStateTable
20001d34 l     O .data	00000020 config
00000000 l    df *ABS*	00000000 task_status.cpp
00000000 l    df *ABS*	00000000 task_manager.cpp
080467dc l     O .rodata	0000026c taskTable
00000000 l    df *ABS*	00000000 power_mode.cpp
0802bfec l     F .text	00000120 POWERMODE_mainStateMachine(unsigned long)
0802c10c l     F .text	00000054 POWERMODE_setup()
200050c0 l     O .bss	00000004 endArticulation
200050c4 l     O .bss	00000014 handler
200050d8 l     O .bss	00000001 powerMode
20001d54 l     O .data	00000050 runModeStateTable
20001da4 l     O .data	00000040 chargeModeStateTable
20001de4 l     O .data	00000020 config
00000000 l    df *ABS*	00000000 upgrader_metaData.cpp
0802c1b8 l     F .text	00000078 UPGRADER_metadataMainStateMachine(unsigned long)
200050dc l     O .bss	00000003 tag
200050e0 l     O .bss	00000014 handler
200050f8 l     O .bss	00000008 tickStat
20001e04 l     O .data	00000020 stateTable
20001e24 l     O .data	00000020 config
00000000 l    df *ABS*	00000000 upgrader_startUpgrade.cpp
0802c29c l     F .text	000000d0 UPGRADER_startUpgradeMainStateMachine(unsigned long)
20005100 l     O .bss	00000004 tickStarted_ms
20005104 l     O .bss	00000014 handler
20001e44 l     O .data	00000050 stateTable
20001e94 l     O .data	00000020 config
00000000 l    df *ABS*	00000000 upgrader_verify.cpp
0802c400 l     F .text	000001b0 UPGRADER_verifyMainStateMachine(unsigned long)
20005118 l     O .bss	00000004 tickStarted_ms
2000511c l     O .bss	00000003 tag
20005120 l     O .bss	00000014 handler
20005134 l     O .bss	00000004 tickStat
20001eb4 l     O .data	00000080 stateTable
20001f34 l     O .data	00000020 config
00000000 l    df *ABS*	00000000 upgrader_dataBlock.cpp
0802c660 l     F .text	00000070 UPGRADER_datablockMainStateMachine(unsigned long)
20005138 l     O .bss	00000003 tag
2000513c l     O .bss	00000014 handler
20005150 l     O .bss	00000004 tickStat
20001f54 l     O .data	00000020 stateTable
20001f74 l     O .data	00000020 config
00000000 l    df *ABS*	00000000 set_config.cpp
00000000 l    df *ABS*	00000000 camera_image_transfer.cpp
0802c7e8 l     F .text	00000002 sendDiagnosticMetadata(unsigned char*, unsigned short)
0802c7ec l     F .text	00000208 CAMERA_IMAGE_TRANSFER_mainStateMachine(unsigned long)
0802c9f4 l     F .text	00000084 CAMERA_IMAGE_TRANSFER_setup()
0802ca84 l     F .text	0000000a sendCCPImageBlock(unsigned char*, unsigned short)
0802ca78 l     F .text	0000000a sendCCPMetadata(unsigned char*, unsigned short)
0802ca90 l     F .text	00000002 sendDiagnosticImageBlock(unsigned char*, unsigned short)
20005154 l     O .bss	00000008 sendHandler
2000515c l     O .bss	00000003 searchHandler
20005160 l     O .bss	00000004 blocksToTransfer
20005164 l     O .bss	00000004 blocksTransferred
20005168 l     O .bss	00000008 image
20005170 l     O .bss	00000014 handler
20005184 l     O .bss	00000010 metaData
20001f94 l     O .data	00000060 stateTable
20001ff4 l     O .data	00000020 config
08046f40 l     O .rodata	0000002d binarySearchTree
00000000 l    df *ABS*	00000000 diagnostic_task_runner.cpp
00000000 l    df *ABS*	00000000 diagnostic_tasks.cpp
0802cafc l     F .text	0000000e readDriveLimitsTask(COMM_DIAGNOSTIC_commandMessage_t*, unsigned long, bool)
0802cb0c l     F .text	00000088 enableMotorAsyncDataTask(COMM_DIAGNOSTIC_commandMessage_t*, unsigned long, bool)
0802cb94 l     F .text	00000038 readStatusTask(COMM_DIAGNOSTIC_commandMessage_t*, unsigned long, bool)
0802cbcc l     F .text	00000070 stopMotorTask(COMM_DIAGNOSTIC_commandMessage_t*, unsigned long, bool)
0802cc3c l     F .text	000000a8 moveMotorTask(COMM_DIAGNOSTIC_commandMessage_t*, unsigned long, bool)
0802cce4 l     F .text	00000034 homeTask(COMM_DIAGNOSTIC_commandMessage_t*, unsigned long, bool)
0802cd18 l     F .text	00000080 powerMotorTask(COMM_DIAGNOSTIC_commandMessage_t*, unsigned long, bool)
0802cd98 l     F .text	00000070 resetMotorTask(COMM_DIAGNOSTIC_commandMessage_t*, unsigned long, bool)
0802ce08 l     F .text	000000f4 getSensorStateTask(COMM_DIAGNOSTIC_commandMessage_t*, unsigned long, bool)
20005194 l     O .bss	00000001 activeAxis
20005198 l     O .bss	00000004 pActiveTask
2000519c l     O .bss	0000001b commandBuffer
200051b7 l     O .bss	00000001 axisId
20002014 l     O .data	00000090 tasks
08046f70 l     O .rodata	00000008 CSWTCH.18
00000000 l    df *ABS*	00000000 no_task.cpp
00000000 l    df *ABS*	00000000 buffer_pick_place.cpp
0802cf80 l     F .text	00000018 BUFFER_PICKPLACE_errorStateMachine(unsigned long)
0802cf98 l     F .text	000000a4 BUFFER_PICKPLACE_setup()
0802d03c l     F .text	000001ec BUFFER_PICKPLACE_mainStateMachine(unsigned long)
200051b8 l     O .bss	00000014 pickConfig
200051cc l     O .bss	00000018 placeConfig
200051e4 l     O .bss	00000004 commandMessage
200051e8 l     O .bss	00000004 turretPosition
200051ec l     O .bss	00000001 cachedErrorCode
200051f0 l     O .bss	00000004 initialLiftPosition
200051f4 l     O .bss	00000014 handler
200020a4 l     O .data	00000090 stateTable
20002134 l     O .data	00000010 errorStateTable
20002144 l     O .data	00000020 config
08047020 l     O .rodata	00000010 turretCCPMapping
00000000 l    df *ABS*	00000000 timer.c
200052bc l     O .bss	00000230 timeout_h
00000000 l    df *ABS*	00000000 software_timer.c
00000000 l    df *ABS*	00000000 imu_pitchroll.c
0802d3e0 l     F .text	000000f4 calculateRawPitchRoll
00000000 l    df *ABS*	00000000 imu_calib.c
200054ec l     O .bss	00000024 accelerometerManager
00000000 l    df *ABS*	00000000 imu.cpp
0802d720 l     F .text	00000020 average(float*) [clone .part.0] [clone .constprop.0]
0802d740 l     F .text	000002f8 imuCheckAllAlarms()
0802de84 l     F .text	000001c8 _GLOBAL__sub_I_IMU_thread
200055e8 l     O .bss	000000f0 imuAlarmList
200056d8 l     O .bss	00000030 processedData
20005708 l     O .bss	00000048 gyroHighpassFilter
20005750 l     O .bss	00000018 gyroIntegralFilter
20005768 l     O .bss	00000001 pitchRollRequested
2000576c l     O .bss	00000100 processData()::axisBuff
08047078 l     O .rodata	00000010 CSWTCH.50
00000000 l    df *ABS*	00000000 imu_driver_bmi270.c
0802e04c l     F .text	00000014 imuDelayUs
0802e060 l     F .text	00000040 imuSPIWrite
0802e0a0 l     F .text	0000004c imuSPIRead
0802e0ec l     F .text	0000007c extIntCallback
20005870 l     O .bss	00000068 dev_config
200058d8 l     O .bss	00000006 handler
200058e0 l     O .bss	00000600 imuBuff
00000000 l    df *ABS*	00000000 utilities.c
00000000 l    df *ABS*	00000000 camera.cpp
0802e408 l     F .text	000000b8 saveCameraCalibration()
0802e4f0 l     F .text	00000030 prepareCognexCommand(char*, char const*, ...) [clone .constprop.0]
0802e52c l     F .text	00000288 programFromReset(unsigned int, void*)
0802e7b4 l     F .text	000000a4 CAMERA_activateProfile(CAMERA_configProfile_t) [clone .part.0]
20005f08 l     O .bss	00003b34 cameraHandler
0802e858 l     F .text	00000078 trigger()
20005ee0 l     O .bss	00000028 calibration
20009a3c l     O .bss	0000001c processedData
20009a58 l     O .bss	00000064 configProfiles
20009abc l     O .bss	00000010 cameraRingBuffer
20009acc l     O .bss	00000080 rxBuffer
20009b4c l     O .bss	00000080 txBuffer
08047708 l     O .rodata	0000000c exposureTableUs
08047714 l     O .rodata	0000000c defaultXCalibrationCoefficients
08047720 l     O .rodata	0000000c defaultYCalibrationCoefficients
00000000 l    df *ABS*	00000000 msgmngr.cpp
00000000 l    df *ABS*	00000000 messageManager.cpp
00000000 l    df *ABS*	00000000 ccp_hardware_network.cpp
0802fc80 l     F .text	00000006 HARDWARE_NETWORK_notifyReceivedNewCCPMessage()
0802fc88 l     F .text	0000000a HARDWARE_NETWORK_ccpSendMessage(unsigned char*, unsigned short)
0802fd58 l     F .text	00000060 _GLOBAL__sub_I_HARDWARE_NETWORK_initializeCCP
20009c80 l     O .bss	00000218 ccpManager
00000000 l    df *ABS*	00000000 hardware_network.cpp
00000000 l    df *ABS*	00000000 mcm_hardware_network.cpp
0802fdf4 l     F .text	00000006 HARDWARE_NETWORK_notifyReceivedNewMCMMessage()
0802fdfc l     F .text	0000000a HARDWARE_NETWORK_mcmSendMessage(unsigned char*, unsigned short)
0802fea4 l     F .text	00000060 _GLOBAL__sub_I_HARDWARE_NETWORK_initializeMCM
20009ec0 l     O .bss	00000218 mcmManager
00000000 l    df *ABS*	00000000 diagnostic_hardware_network.cpp
0802ff04 l     F .text	00000008 HARDWARE_NETWORK_notifyReceivedNewDiagnosticMessage()
0802ff0c l     F .text	0000000a HARDWARE_NETWORK_diagnosticSendMessage(unsigned char*, unsigned short)
0802ffb4 l     F .text	00000060 _GLOBAL__sub_I_HARDWARE_NETWORK_initializeDiagnostic
2000a0d8 l     O .bss	00000218 diagnosticManager
00000000 l    df *ABS*	00000000 nest.cpp
00000000 l    df *ABS*	00000000 canmngr.cpp
08030370 l     F .text	000001c0 CANMNGR_sendMsgs.part.0
08030530 l     F .text	00000084 addFilterMsgSrc(CAN_handlerIndex_t, CAN_fifo_t, COMM_CAN_deviceType_e) [clone .constprop.0]
2000a3c8 l     O .bss	000009d8 msgControl
2000ada0 l     O .bss	0000004c mutex
2000adec l     O .bss	00000528 txQueues
00000000 l    df *ABS*	00000000 sto.c
00000000 l    df *ABS*	00000000 publisher.cpp
00000000 l    df *ABS*	00000000 progress_monitor.cpp
00000000 l    df *ABS*	00000000 axis_telemetry_monitor.cpp
00000000 l    df *ABS*	00000000 torque_monitor.cpp
00000000 l    df *ABS*	00000000 bin_sensor.cpp
00000000 l    df *ABS*	00000000 bin_manager.cpp
08047b54 l     O .rodata	00000044 debugStateStrings
00000000 l    df *ABS*	00000000 hardware_bin_manager.cpp
08047bc4 l     O .rodata	00000008 negx_negy_pin
08047bcc l     O .rodata	00000008 negx_posy_pin
08047bd4 l     O .rodata	00000008 posx_negy_pin
08047bdc l     O .rodata	00000008 posx_posy_pin
00000000 l    df *ABS*	00000000 application_memory_pool.cpp
2000b318 l     O .bss	00002af8 applicationBytePool
2000de10 l     O .bss	00000004 totalAllocatedBytes
20002164 l     O .data	00000001 allocationPoolUnlocked
00000000 l    df *ABS*	00000000 nvm_manager.c
00000000 l    df *ABS*	00000000 awareness.cpp
2000e230 l     O .bss	00000030 alarmData
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 upgrader.c
08031e20 l     F .text	000000ac eraseCRCregion
08047eb0 l     O .rodata	0000001a __FUNCTION__.15174
08047ecc l     O .rodata	0000000e __FUNCTION__.15182
08047edc l     O .rodata	0000000f __FUNCTION__.15191
00000000 l    df *ABS*	00000000 upgrader_comm.c
2000e260 l     O .bss	00000060 dataBuf
2000e2c0 l     O .bss	00000070 multiFrameMngr
2000e330 l     O .bss	00000010 rxRingBuf
2000e340 l     O .bss	00000004 tickSendLast_ms
00000000 l    df *ABS*	00000000 upgrader_manager.c
2000e344 l     O .bss	0000000a dataRxBuf
2000e350 l     O .bss	00000004 funcCallbackResponseReceived
2000e358 l     O .bss	000000c8 upgMngr
2000e420 l     O .bss	00000060 upgStat
080483f0 l     O .rodata	00000020 CSWTCH.171
08048410 l     O .rodata	00000010 CSWTCH.173
00000000 l    df *ABS*	00000000 statusLed.cpp
08033d78 l     F .text	000000f4 statusLed_timerCallback(unsigned int, void*)
2000e484 l     O .bss	00000002 max_update_period_cycles
2000e486 l     O .bss	00000001 previousSubperiodColours
2000e487 l     O .bss	00000001 previousSubperiodDuration
2000216c l     O .data	00000001 requestStoState
2000216d l     O .data	00000001 statusled_autoUpdateEnable
00000000 l    df *ABS*	00000000 drive_wheel_config.cpp
08033e98 l     F .text	00000168 AXIS_loadYWheelDiameter()
08034010 l     F .text	00000168 AXIS_loadXWheelDiameter()
08034184 l     F .text	00000040 AXIS_saveYWheelDiameter(float)
080341c4 l     F .text	00000040 AXIS_saveXWheelDiameter(float)
08034204 l     F .text	0000022c _GLOBAL__sub_I_g_dynamicAxis_1
2000e488 l     O .bss	00000090 staticAxis_1
2000e518 l     O .bss	00000090 staticAxis_2
2000e5a8 l     O .bss	00000090 staticAxis_3
2000e638 l     O .bss	00000090 staticAxis_4
2000e6c8 l     O .bss	00000090 dynamicAxis_1
2000e758 l     O .bss	00000090 dynamicAxis_2
2000e7e8 l     O .bss	00000090 dynamicAxis_3
2000e878 l     O .bss	00000090 dynamicAxis_4
2000e908 l     O .bss	00000098 xAxis
2000e9a0 l     O .bss	00000098 yAxis
2000ea38 l     O .bss	00000098 z8Axis
2000ead0 l     O .bss	00000098 z4DAxis
2000eb68 l     O .bss	00000098 z4SAxis
20002170 l     O .data	00000010 xAxisNodes
20002180 l     O .data	00000010 yAxisNodes
20002190 l     O .data	00000020 z8AxisNodes
200021b0 l     O .data	00000010 z4DAxisNodes
200021c0 l     O .data	00000010 z4SAxisNodes
200021d0 l     O .data	00000028 verticalAxisConfig
200021f8 l     O .data	00000028 horizontalAxisConfig
20002220 l     O .data	00000024 driveWheelServoConfig
20002244 l     O .data	00000010 verticalMotionProfiles
080485d8 l     O .rodata	0000003c verticalDefaultMotionProfile
08048560 l     O .rodata	0000003c verticalSafeMotionProfile
20002254 l     O .data	00000010 horizontalMotionProfiles
08048614 l     O .rodata	0000003c horizontalDefaultMotionProfile
0804859c l     O .rodata	0000003c horizontalSafeMotionProfile
08048650 l     O .rodata	0000003c horizontalRecoveryMotionProfile
0804868c l     O .rodata	0000003c horizontalCalibrationMotionProfile
00000000 l    df *ABS*	00000000 lift_config.cpp
08034430 l     F .text	00000098 _GLOBAL__sub_I_g_liftAxisYNeg
2000ec00 l     O .bss	00000090 liftAxisYNeg
2000ec90 l     O .bss	00000090 liftAxisYPos
2000ed20 l     O .bss	00000098 liftAxis
20002298 l     O .data	00000008 liftAxisNodes
200022a0 l     O .data	00000028 liftAxisConfig
200022c8 l     O .data	00000024 liftServoConfig
200022ec l     O .data	00000010 liftMotionProfiles
08048728 l     O .rodata	0000003c liftDefaultMotionProfile
080486ec l     O .rodata	0000003c liftSafeMotionProfile
00000000 l    df *ABS*	00000000 pickarm_config.cpp
080344c8 l     F .text	00000044 _GLOBAL__sub_I_g_pickarmAxis
2000edb8 l     O .bss	00000090 pickarmAxis
20002308 l     O .data	00000028 pickarmAxisConfig
20002330 l     O .data	00000024 pickarmServoConfig
20002354 l     O .data	00000010 pickarmMotionProfiles
080487a8 l     O .rodata	0000003c pickarmDefaultMotionProfile
0804876c l     O .rodata	0000003c pickarmSafeMotionProfile
00000000 l    df *ABS*	00000000 turret_config.cpp
0803450c l     F .text	00000040 _GLOBAL__sub_I_g_turretAxis
2000ee48 l     O .bss	00000090 turretAxis
20002368 l     O .data	00000028 turretAxisConfig
20002390 l     O .data	00000024 turretServoConfig
200023b4 l     O .data	00000010 turretMotionProfiles
080487ec l     O .rodata	0000003c turretDefaultMotionProfile
00000000 l    df *ABS*	00000000 wheel_articulation_config.cpp
0803454c l     F .text	00000188 _GLOBAL__sub_I_g_wheelArticulationAxis_yNegRight
2000eed8 l     O .bss	000000a0 staticWheelArticulationAxis
2000ef78 l     O .bss	000000a0 dynamicWheelArticulationAxis
2000f018 l     O .bss	00000098 wheelArticulationAxis_xNegLeft
2000f0b0 l     O .bss	00000098 wheelArticulationAxis_xPosLeft
2000f148 l     O .bss	00000098 wheelArticulationAxis_yNegLeft
2000f1e0 l     O .bss	00000098 wheelArticulationAxis_yPosLeft
2000f278 l     O .bss	00000098 wheelArticulationAxis_xNegRight
2000f310 l     O .bss	00000098 wheelArticulationAxis_xPosRight
2000f3a8 l     O .bss	00000098 wheelArticulationAxis_yNegRight
2000f440 l     O .bss	00000098 wheelArticulationAxis_yPosRight
200023c8 l     O .data	00000028 wheelArtAxisConfig
200023f0 l     O .data	00000006 wheelArtControlSettings
200023f8 l     O .data	00000010 staticWheelArticulationAxes
20002408 l     O .data	00000010 dynamicWheelArticulationNodes
20002418 l     O .data	00000010 wheelArticulationMotionProfiles
08048880 l     O .rodata	0000003c wheelArticulationDefaultMotionProfile
00000000 l    df *ABS*	00000000 bin_manger_config.cpp
08034704 l     F .text	0000008c binStateChangeCallback(void*)
08034790 l     F .text	00000038 _GLOBAL__sub_I_binManager
00000000 l    df *ABS*	00000000 robot_config.cpp
080347c8 l     F .text	00000140 _GLOBAL__sub_I_robot
2000f5bc l     O .bss	00000004 robotSensors
2000f5c0 l     O .bss	00000070 axes
00000000 l    df *ABS*	00000000 usart.cpp
08034908 l     F .text	0000009c handleIRQ(USART_TypeDef*)
2000f640 l     O .bss	00000bd8 txFifoList
20010218 l     O .bss	00000200 ccpReceiveBuffer
20010418 l     O .bss	00000200 ccpTransmitBuffer
20010618 l     O .bss	00000010 ccpReceiveRingBuffer
20010628 l     O .bss	00000010 ccpTransmitRingBuffer
20010638 l     O .bss	00000020 handler
00000000 l    df *ABS*	00000000 hwm.c
00000000 l    df *ABS*	00000000 gpio.c
08034e40 l     F .text	00000048 defaultCallback
08034e88 l     F .text	000000e0 setupInterrupt
20010658 l     O .bss	00000140 handles
08048970 l     O .rodata	0000003c configMap
080489ac l     O .rodata	0000002c gpioPorts
00000000 l    df *ABS*	00000000 spi.c
20010798 l     O .bss	00000020 handler
00000000 l    df *ABS*	00000000 can.c
08035524 l     F .text	0000006c receiveMsg
200107b8 l     O .bss	000000f0 handler
200108a8 l     O .bss	00000cd0 queues
080489d8 l     O .rodata	00000014 canRxEventFlags
080489ec l     O .rodata	00000008 fifoInterrupts
080489f4 l     O .rodata	00000002 maxFilters
00000000 l    df *ABS*	00000000 crc.c
00000000 l    df *ABS*	00000000 nx_driver_stm32f4xx.c
200115c4 l     O .bss	00000b68 nx_driver_information
00000000 l    df *ABS*	00000000 stm32f4x9_eth.c
00000000 l    df *ABS*	00000000 stm32f4x9_eth_bsp.c
00000000 l    df *ABS*	00000000 nx_arp_enable.c
00000000 l    df *ABS*	00000000 nx_arp_entry_allocate.c
00000000 l    df *ABS*	00000000 nx_arp_packet_deferred_receive.c
00000000 l    df *ABS*	00000000 nx_arp_packet_receive.c
00000000 l    df *ABS*	00000000 nx_arp_packet_send.c
00000000 l    df *ABS*	00000000 nx_arp_periodic_update.c
00000000 l    df *ABS*	00000000 nx_arp_queue_process.c
00000000 l    df *ABS*	00000000 nx_icmp_enable.c
00000000 l    df *ABS*	00000000 nx_icmp_packet_process.c
00000000 l    df *ABS*	00000000 nx_icmp_packet_receive.c
00000000 l    df *ABS*	00000000 nx_icmp_queue_process.c
00000000 l    df *ABS*	00000000 nx_igmp_multicast_check.c
00000000 l    df *ABS*	00000000 nx_ip_create.c
00000000 l    df *ABS*	00000000 nx_ip_deferred_link_status_process.c
00000000 l    df *ABS*	00000000 nx_ip_driver_deferred_processing.c
00000000 l    df *ABS*	00000000 nx_ip_initialize.c
00000000 l    df *ABS*	00000000 nx_ip_loopback_send.c
00000000 l    df *ABS*	00000000 nx_ip_packet_deferred_receive.c
00000000 l    df *ABS*	00000000 nx_ip_packet_receive.c
00000000 l    df *ABS*	00000000 nx_ip_packet_send.c
00000000 l    df *ABS*	00000000 nx_ip_periodic_timer_entry.c
00000000 l    df *ABS*	00000000 nx_ip_route_find.c
00000000 l    df *ABS*	00000000 nx_ip_thread_entry.c
00000000 l    df *ABS*	00000000 nx_packet_allocate.c
00000000 l    df *ABS*	00000000 nx_packet_copy.c
00000000 l    df *ABS*	00000000 nx_packet_data_append.c
00000000 l    df *ABS*	00000000 nx_packet_data_retrieve.c
00000000 l    df *ABS*	00000000 nx_packet_length_get.c
00000000 l    df *ABS*	00000000 nx_packet_pool_cleanup.c
00000000 l    df *ABS*	00000000 nx_packet_pool_create.c
00000000 l    df *ABS*	00000000 nx_packet_pool_initialize.c
00000000 l    df *ABS*	00000000 nx_packet_release.c
00000000 l    df *ABS*	00000000 nx_packet_transmit_release.c
00000000 l    df *ABS*	00000000 nx_rarp_packet_deferred_receive.c
00000000 l    df *ABS*	00000000 nx_system_initialize.c
00000000 l    df *ABS*	00000000 nx_udp_bind_cleanup.c
00000000 l    df *ABS*	00000000 nx_udp_enable.c
00000000 l    df *ABS*	00000000 nx_udp_free_port_find.c
00000000 l    df *ABS*	00000000 nx_udp_packet_receive.c
00000000 l    df *ABS*	00000000 nx_udp_receive_cleanup.c
00000000 l    df *ABS*	00000000 nx_udp_socket_bind.c
00000000 l    df *ABS*	00000000 nx_udp_socket_create.c
00000000 l    df *ABS*	00000000 nx_udp_socket_receive.c
00000000 l    df *ABS*	00000000 nx_udp_socket_receive_notify.c
00000000 l    df *ABS*	00000000 nx_udp_socket_send.c
00000000 l    df *ABS*	00000000 nx_udp_source_extract.c
00000000 l    df *ABS*	00000000 tx_event_flags_cleanup.c
00000000 l    df *ABS*	00000000 tx_event_flags_create.c
00000000 l    df *ABS*	00000000 tx_event_flags_delete.c
00000000 l    df *ABS*	00000000 tx_event_flags_get.c
00000000 l    df *ABS*	00000000 tx_event_flags_set.c
00000000 l    df *ABS*	00000000 tx_initialize_high_level.c
00000000 l    df *ABS*	00000000 tx_initialize_kernel_enter.c
00000000 l    df *ABS*	00000000 tx_mutex_cleanup.c
00000000 l    df *ABS*	00000000 tx_mutex_create.c
00000000 l    df *ABS*	00000000 tx_mutex_delete.c
00000000 l    df *ABS*	00000000 tx_mutex_get.c
00000000 l    df *ABS*	00000000 tx_mutex_prioritize.c
00000000 l    df *ABS*	00000000 tx_mutex_priority_change.c
00000000 l    df *ABS*	00000000 tx_mutex_put.c
00000000 l    df *ABS*	00000000 v5_rcp Beta - Release/tx_thread_context_restore.o
00000000 l    df *ABS*	00000000 v5_rcp Beta - Release/tx_thread_context_save.o
00000000 l    df *ABS*	00000000 tx_thread_create.c
00000000 l    df *ABS*	00000000 tx_thread_delete.c
00000000 l    df *ABS*	00000000 tx_thread_initialize.c
00000000 l    df *ABS*	00000000 v5_rcp Beta - Release/tx_thread_interrupt_control.o
00000000 l    df *ABS*	00000000 v5_rcp Beta - Release/tx_thread_schedule.o
08039e28 l     F .text	00000000 __tx_ts_handler
08039e64 l       .text	00000000 __tx_ts_new
08039e4c l       .text	00000000 __tx_dont_save_fpu
08039ea6 l       .text	00000000 __tx_ts_wait
08039e6e l       .text	00000000 __tx_ts_restore
08039e98 l       .text	00000000 __tx_dont_restore_fpu
08039eb6 l       .text	00000000 __tx_ts_ready
08039eb0 l       .text	00000000 __tx_ts_ISB
08039eda l       .text	00000000 __tx_no_thread_to_enable
08039eee l       .text	00000000 __tx_no_thread_to_disable
00000000 l    df *ABS*	00000000 tx_thread_shell_entry.c
00000000 l    df *ABS*	00000000 tx_thread_sleep.c
00000000 l    df *ABS*	00000000 tx_thread_stack_analyze.c
00000000 l    df *ABS*	00000000 v5_rcp Beta - Release/tx_thread_stack_build.o
00000000 l    df *ABS*	00000000 tx_thread_stack_error_handler.c
00000000 l    df *ABS*	00000000 tx_thread_stack_error_notify.c
00000000 l    df *ABS*	00000000 tx_thread_system_preempt_check.c
00000000 l    df *ABS*	00000000 tx_thread_system_resume.c
00000000 l    df *ABS*	00000000 v5_rcp Beta - Release/tx_thread_system_return.o
00000000 l    df *ABS*	00000000 tx_thread_system_suspend.c
00000000 l    df *ABS*	00000000 tx_thread_terminate.c
00000000 l    df *ABS*	00000000 tx_thread_time_slice.c
00000000 l    df *ABS*	00000000 tx_thread_timeout.c
00000000 l    df *ABS*	00000000 tx_time_get.c
00000000 l    df *ABS*	00000000 tx_timer_create.c
00000000 l    df *ABS*	00000000 tx_timer_expiration_process.c
00000000 l    df *ABS*	00000000 tx_timer_initialize.c
00000000 l    df *ABS*	00000000 v5_rcp Beta - Release/tx_timer_interrupt.o
0803aa14 l       .text	00000000 __tx_timer_no_time_slice
0803aa28 l       .text	00000000 __tx_timer_no_timer
0803aa3a l       .text	00000000 __tx_timer_done
0803aa38 l       .text	00000000 __tx_timer_skip_wrap
0803aa4a l       .text	00000000 __tx_something_expired
0803aa6a l       .text	00000000 __tx_timer_nothing_expired
0803aa5a l       .text	00000000 __tx_timer_dont_activate
0803aa66 l       .text	00000000 __tx_timer_not_ts_expiration
00000000 l    df *ABS*	00000000 tx_timer_system_activate.c
00000000 l    df *ABS*	00000000 tx_timer_system_deactivate.c
00000000 l    df *ABS*	00000000 misc.c
00000000 l    df *ABS*	00000000 stm32f4xx_can.c
00000000 l    df *ABS*	00000000 stm32f4xx_exti.c
00000000 l    df *ABS*	00000000 stm32f4xx_flash.c
00000000 l    df *ABS*	00000000 stm32f4xx_gpio.c
00000000 l    df *ABS*	00000000 stm32f4xx_rcc.c
200024cc l     O .data	00000010 APBAHBPrescTable
00000000 l    df *ABS*	00000000 stm32f4xx_spi.c
00000000 l    df *ABS*	00000000 stm32f4xx_syscfg.c
00000000 l    df *ABS*	00000000 stm32f4xx_usart.c
00000000 l    df *ABS*	00000000 fifo.c
00000000 l    df *ABS*	00000000 fram.c
00000000 l    df *ABS*	00000000 sram.c
00000000 l    df *ABS*	00000000 comm_bootloader_error_codes.c
08049778 l     O .rodata	000000bc bootErrorMsg
00000000 l    df *ABS*	00000000 bmi2.c
0803c9d8 l     F .text	000000ae get_remapped_data
0803cb30 l     F .text	0000002e cfg_error_status
0803cbcc l     F .text	00000040 upload_file
0803cc0c l     F .text	00000042 set_config_load
0803cc50 l     F .text	000000bc set_accel_config
0803cd0c l     F .text	000000d8 set_gyro_config
0803d360 l     F .text	0000006a get_gyro_gain_update_status
00000000 l    df *ABS*	00000000 bmi270.c
0803da30 l     F .text	000000de select_sensor
0803db10 l     F .text	00000068 set_sig_motion
0803db78 l     F .text	0000006c set_any_motion
0803dbe4 l     F .text	0000006a set_no_motion
0803dc50 l     F .text	0000006a set_step_detector
0803dcbc l     F .text	0000006a set_step_counter
0803dd28 l     F .text	0000006a set_step_activity
0803dd94 l     F .text	0000006a set_gyro_user_gain
0803de00 l     F .text	00000066 set_gyro_self_offset_corr
0803de68 l     F .text	00000066 set_wrist_gesture
0803ded0 l     F .text	00000066 set_wrist_wear_wake_up
00000000 l    df *ABS*	00000000 CMSIS_DSP_unity.c
00000000 l    df *ABS*	00000000 libm_asm.o
00000000 l    df *ABS*	00000000 libm2.c
0804b884 l     O .rodata	00000010 atanf_a
00000000 l    df *ABS*	00000000 libm2_asm.o
00000000 l    df *ABS*	00000000 fdlibm.c
00000000 l    df *ABS*	00000000 libc2.c
0803ec84 l     F .text	0000001c __RAL_ascii_isctype
0803eca0 l     F .text	0000000c __RAL_ascii_toupper
0803ecac l     F .text	0000000c __RAL_ascii_tolower
0803ecb8 l     F .text	0000001c __RAL_ascii_iswctype
0803ecd4 l     F .text	0000000c __RAL_ascii_towupper
0803ece0 l     F .text	0000000c __RAL_ascii_towlower
2001244c l     O .bss	00000080 __atexitfns
200124d4 l     O .bss	00000004 atexitfn_count
0804b91c l     O .rodata	0000000d __RAL_ascii_ctype_mask
0804baf4 l     O .rodata	00000018 powerf
00000000 l       .tbss	00000004 errno_val
00000000 l       .tbss	00000000 .LANCHOR16
00000000 l    df *ABS*	00000000 libc2_asm.o
00000000 l    df *ABS*	00000000 libc.c
00000000 l    df *ABS*	00000000 cxa_exception.cpp
0803f7d8 l     F .text	00000050 __cxa_end_cleanup_impl
00000000 l    df *ABS*	00000000 cxa_exception_storage.cpp
200124d8 l     O .bss	0000000c __cxxabiv1::eh_globals
00000000 l    df *ABS*	00000000 cxa_handlers.cpp
00000000 l    df *ABS*	00000000 cxa_personality.cpp
0803f938 l     F .text	00000024 readULEB128
0803f95c l     F .text	00000038 readSLEB128
0803f998 l     F .text	00000028 get_thrown_object_ptr
0803f9c0 l     F .text	0000001c call_terminate
0803f9dc l     F .text	0000005c set_registers
0803fa38 l     F .text	00000108 readEncodedPointer
0803fb40 l     F .text	00000054 exception_spec_can_catch
0803fb94 l     F .text	0000035c scan_eh_tab
00000000 l    df *ABS*	00000000 cxa_virtual.cpp
00000000 l    df *ABS*	00000000 stdlib_new_delete.cpp
00000000 l    df *ABS*	00000000 Unwind-EHABI.cpp
080400e0 l     F .text	000000b4 unwind_phase2(unw_context_t*, unw_cursor_t*, _Unwind_Control_Block*, bool)
0804021a l     F .text	0000002e (anonymous namespace)::unwindOneFrame(unsigned int, _Unwind_Control_Block*, _Unwind_Context*)
00000000 l    df *ABS*	00000000 UnwindRegistersSave.o
00000000 l    df *ABS*	00000000 abort_message.cpp
00000000 l    df *ABS*	00000000 cxa_default_handlers.cpp
08040798 l     F .text	00000020 _GLOBAL__sub_I___cxa_terminate_handler
00000000 l    df *ABS*	00000000 libunwind.cpp
00000000 l    df *ABS*	00000000 UnwindRegistersRestore.o
00000000 l    df *ABS*	00000000 libvfprintf.c
0804bd58 l     O .rodata	000000a0 ipow10
00000000 l    df *ABS*	00000000 
00000000 l       .tbss	00000000 _TLS_MODULE_BASE_
0802fca0 g     F .text	0000000c HARDWARE_NETWORK_sendCCPMessage
08020230  w    F .init	00000000 LTDC_ER_IRQHandler
0804b9f8 g     O .rodata	0000000f __RAL_c_locale_date_time_format
08031aec g     F .text	0000003c main
2000e17c g     O .bss	000000b4 AWARENESS_thread
200124e4 g     O .bss	00000004 __cxa_terminate_handler
08023060 g     F .text	00000040 MultiServoAxis::MultiServoAxis(char const*, unsigned char, AXIS_config_t*, SingleServoAxis::Config const*, AXIS_motionProfile_t const* const*, unsigned char, SingleServoAxis**, unsigned char, bool (*)(unsigned char, unsigned char, unsigned char*, unsigned short), void (*)(float), float (*)())
0802448c g     F .text	00000050 CDM_sendDevMulticast
0802d3cc g     F .text	00000010 SOFTWARE_TIMER_disable
20000000 g       .fast_run	00000000 __fast_run_load_end__
08035290 g     F .text	00000230 SPI_setup
08038158 g     F .text	0000011e _nx_packet_data_append
0802f1bc g     F .text	00000030 CAMERA_getVersion()
0803a0a4 g     F .text	0000001c _tx_thread_stack_error_notify
0802eb08 g     F .text	0000000c CAMERA_setSimMode(bool)
0802020c  w    F .init	00000000 DMA2_Stream5_IRQHandler
08039548 g     F .text	00000060 _tx_mutex_create
0803e9e4  w    F .text	00000058 modf(float, float*)
0802021a  w    F .init	00000000 OTG_HS_WKUP_IRQHandler
20005534 g     O .bss	000000b4 IMU_thread
0802accc g     F .text	0000003c RECOVERY_noMoveRecovery(unsigned long, bool, COMM_CCP_recoveryDirection_t)
08038634 g     F .text	00000010 _nx_udp_enable
0802bd0c g     F .text	0000002e TaskStatus::operator&=(TaskStatus const&)
00000000 g       *ABS*	00000000 __STACKSIZE_SVC__
0803efd8  w    F .text	00000222 qsort
08030e30 g     F .text	0000002e BinManager::reset()
0802bd3c g     F .text	00000020 TaskManager::TaskManager()
080407c8  w    F .text	0000000e .hidden libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm>::validFloatReg(int)
08042114 g       *ABS*	00000000 __rodata_load_start__
080308ac g     F .text	00000066 Publisher::subscribe(SubscriberBase*)
0802ff30 g     F .text	0000000c HARDWARE_NETWORK_getNumDiagnosticMessagesToSend
08040ce4  w    F .text	00000008 .hidden libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm>::saveVFPAsX()
08034e04 g     F .text	00000030 HWM_init
200124f4 g       .tdata_run	00000000 __tdata_run_load_end__
0802ed04 g     F .text	00000020 CAMERA_getResponseData()
08040ee0 g     F .text	00000064 unw_init_local
08032958 g     F .text	00000024 UPG_MNGR_prepareForUpgrade
08038dec  w    F .text	00000000 EXTI1_IRQHandler
0802da44 g     F .text	00000400 IMU_enterThread
08022be4 g     F .text	00000092 Robot::processMsg(COMM_source_t, unsigned char, unsigned char*, unsigned short)
08036cf0 g     F .text	000000b8 _nx_arp_entry_allocate
0803551c g     F .text	00000002 SPI2_IRQ_handler
08036a28 g     F .text	00000228 ETH_BSP_Config
08038f04  w    F .text	00000000 abort
080250cc g     F .text	0000003c DIAGNOSTIC_enableDiagnosticMode(void*, unsigned long, bool)
0803b050 g     F .text	000000cc CAN_Receive
00000238 g       *ABS*	00000000 __init_size__
08039e20 g     F .text	00000000 _tx_thread_schedule
080384d0 g     F .text	00000042 _nx_packet_transmit_release
0802ff24 g     F .text	0000000c HARDWARE_NETWORK_sendDiagnosticMessage
08022fac g     F .text	00000006 AxisBase::addDataSubscriber(SubscriberBase*)
080309a8 g     F .text	00000018 ProgressMonitor::ProgressMonitor()
20012308 g     O .bss	00000004 _tx_timer_created_count
0804caa8 g       .ARM.exidx	00000000 __ARM.exidx_load_end__
0802bccc g     F .text	0000000a TaskStatus::TaskStatus(TaskStatus::Result_e)
080407ba  w    F .text	00000002 .hidden libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm>::~UnwindCursor()
08034b08 g     F .text	00000108 USART_initCcpUSART
080201f0  w    F .init	00000000 TIM8_UP_TIM13_IRQHandler
00000000 g       *ABS*	00000000 __STACKSIZE_IRQ__
2001231c g     O .bss	00000004 _tx_timer_expired_timer_ptr
0803f8a0 g     F .text	00000008 __cxa_get_globals_fast
08027c20 g     F .text	000000a0 ACTIONS_stop(bool, ROBOT_axisIndex_t)
08023378 g     F .text	00000036 SingleServoAxis::power(AXIS_powerState_t)
08038dd0  w    F .text	00000000 USART6_IRQHandler
080407b8  w    F .text	00000002 .hidden libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm>::~UnwindCursor()
08023860 g     F .text	00000040 MultiStepperAxis::MultiStepperAxis(char const*, unsigned char, AXIS_config_t*, COMM_CDM_MOTOR_torqueSettings_t const*, AXIS_motionProfile_t const* const*, unsigned char, SingleStepperAxis**, unsigned char, bool (*)(unsigned char, unsigned char, unsigned char*, unsigned short), void (*)(float), float (*)())
0802f888 g     F .text	000000f0 MessageManager::pushSendMessage(unsigned char*, unsigned short, TX_MUTEX_STRUCT*, RingBuffer<unsigned char>*)
08032efc g     F .text	000000a4 UPG_MNGR_requestAppVersion
080310d4 g     F .text	00000008 HardwareBinManager::pollBinSensors(unsigned int, void*)
2001223c g     O .bss	00000004 _tx_mutex_performance_priority_inversion_count
0803e880  w    F .text	00000000 __float32_signbit
0803e368  w    F .text	00000000 __aeabi_ui2d
0802f9f8 g     F .text	00000046 MessageManager::pushStandardSendMessage(unsigned char*, unsigned short)
080479f4 g     O .rodata	00000010 vtable for AxisTelemetryMonitor
200123a4 g     O .bss	00000004 _tx_timer_list_start
08036980 g     F .text	00000030 ETH_Start
08022abc g     F .text	00000024 Robot::updateArticulation(Articulation::State_e)
080237b4 g     F .text	00000066 MultiStepperAxis::move(float, AXIS_moveType_t, unsigned char, float, float, float)
080238c4 g     F .text	0000000e SingleStepperAxis::isOvertorque()
08030e60 g     F .text	0000006a BinManager::getTelemBinState()
08031834 g     F .text	000001ac AWARENESS_enterThread(unsigned long)
080232b0 g     F .text	000000bc SingleServoAxis::home(AXIS_homeType_t, float, float, float, float)
00000000 g       *ABS*	00000000 __init_rodata_size__
08043d40  w    O .rodata	0000003c vtable for AxisBase
08039be0 g     F .text	00000000 _tx_thread_context_save
2001c000 g       *ABS*	00000000 __SRAM1_segment_end__
0803e42e  w    F .text	00000000 __float64_to_uint32
08020210  w    F .init	00000000 DMA2_Stream7_IRQHandler
0802fc94 g     F .text	0000000c HARDWARE_NETWORK_initializeCCP
08041004 g     F .text	0000000a unw_step
08039fb0 g     F .text	00000090 _tx_thread_stack_analyze
08040cec  w    F .text	00000038 .hidden libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm>::setReg(int, unsigned int)
08022cec g     F .text	00000064 AxisBase::AxisBase(char const*, unsigned char, AXIS_config_t*, AXIS_motionProfile_t const* const*, unsigned char, bool (*)(unsigned char, unsigned char, unsigned char*, unsigned short), void (*)(float), float (*)())
08026590 g     F .text	000000a0 PICK_BIN_RETRIES_runTask(PICK_BIN_RETRIES_type_t, unsigned long, PICK_BIN_config_t*, bool)
08038dc2  w    F .text	00000000 UART4_IRQHandler
90000000 g       *ABS*	00000000 __PCCARD_segment_end__
080201ec  w    F .init	00000000 OTG_FS_WKUP_IRQHandler
08040284 g     F .text	00000070 _Unwind_VRS_Set
20012274 g     O .bss	00000004 _tx_thread_highest_priority
08035798 g     F .text	00000078 CAN_addFilter
080329a0 g     F .text	00000070 UPG_MNGR_confirmMetaData
0802d6c4 g     F .text	0000005c IMU_CALIB_accelToMetric
e0000000 g       *ABS*	00000000 __PPB_segment_start__
080201f4  w    F .init	00000000 TIM8_CC_IRQHandler
08022f3c g     F .text	00000030 AxisBase::checkWithinLimits(float)
08038404 g     F .text	00000014 _nx_packet_pool_initialize
080251f8 g     F .text	00000002 DIAGNOSTIC_endianSwapReadDriveLimitsCommand(COMM_DIAGNSOTIC_readDriveLimits_t*)
2000e354 g     O .bss	00000001 msgNo
0803c498 g     F .text	000000c8 FRAM_read
60000000 g       *ABS*	00000000 __NOR_PSRAM1_segment_end__
08040780 g     F .text	00000000 .hidden libunwind::Registers_arm::saveVFPWithFSTMX(unsigned long long*)
0803df38 g     F .text	00000080 bmi270_init
0803d238 g     F .text	0000006c bmi2_sec_init
08028314 g     F .text	00000006 SM_RUNNER_abort
080420b8 g       .ctors	00000000 __ctors_start__
0803e88a  w    F .text	00000000 __float32_isinf
08038d8a  w    F .text	00000000 ETH_IRQHandler
0802fa48 g     F .text	00000006 MessageManager::numMessagesToSend() const
08038e4e  w    F .text	00000000 SPI2_IRQHandler
0804bdf8 g       *ABS*	00000000 __ARM.exidx_load_start__
08031148 g     F .text	00000024 HardwareBinManager::readPosXNegY()
080420b8 g       .ctors	00000000 __dtors_start__
080244dc g     F .text	000000cc CDM_getFwVersion
400a0000 g       *ABS*	00000000 __AHB1_segment_end__
0803d1c0 g     F .text	00000078 bmi2_soft_reset
08037e14 g     F .text	00000208 _nx_ip_thread_entry
08040dd2  w    F .text	0000006e .hidden libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm>::setFloatReg(int, unsigned long long)
0804bac8 g     O .rodata	00000001 __RAL_data_empty_string
0803aec8 g     F .text	00000058 CAN_SlaveStartBank
2001224c g     O .bss	00000004 _tx_queue_created_count
20004b30 g     O .bss	0000001c nest
08021530 g     F .text	00000020 CLI_listCommands
0802bcd8 g     F .text	00000010 TaskStatus::TaskStatus(TaskStatus::Result_e, unsigned int)
2000b314 g     O .bss	00000002 STO_handler
08020c00 g     F .text	00000114 SYSTEM_enterThread
08038e24  w    F .text	00000000 EXTI9_5_IRQHandler
0803eebc g     F .text	000000dc __strtoul
0802e3fc g     F .text	0000000a UTILITIES_isDataAvailable
080279dc g     F .text	00000070 ACTIONS_moveList(bool, ROBOT_axisIndex_t const*, float*, AXIS_moveType_t*, unsigned char, unsigned int, AXIS_mode_t)
0803a780 g     F .text	00000044 _tx_thread_timeout
080407bc  w    F .text	0000000c .hidden libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm>::validReg(int)
0803c904 g     F .text	000000bc SRAM_writeTest
080354c0 g     F .text	00000058 SPI_readWrite
0803b57c g     F .text	000000d4 GPIO_ReadInputDataBit
0803f21c  w    F .text	00000028 snprintf
08036e04 g     F .text	00000346 _nx_arp_packet_receive
00000008 g       *ABS*	00000000 __OPTION_segment_size__
0802f40c g     F .text	00000030 MessageManager::~MessageManager()
0802de50 g     F .text	00000024 IMU_getProcData
70000000 g       *ABS*	00000000 __NAND1_segment_start__
08039e10 g     F .text	00000000 _tx_thread_interrupt_control
080203e4 g       .text	00000000 __text_start__
08038d8a g       .text	00000000 __nx_driver_stm32f4xx_ethernet_isr
080385c4 g     F .text	00000070 _nx_udp_bind_cleanup
0803b3c0 g     F .text	0000006c FLASH_ProgramByte
200022fc g     O .data	00000004 g_liftAxis
0804baf0 g     O .rodata	00000004 __aeabi_EDOM
0804bae0 g     O .rodata	00000010 __RAL_hex_uc
0802bfd8 g     F .text	00000004 TaskManager::getLastTaskPayload()
200124f4 g       .tdata_run	00000000 __tdata_run_end__
0802359c g     F .text	000000d6 SingleServoAxis::move(float, AXIS_moveType_t, unsigned char, float, float, float)
90000000 g       *ABS*	00000000 __PCCARD_segment_start__
0803cb60 g     F .text	0000006c bmi2_set_regs
0803eb40  w    F .text	00000000 floor(float)
00002504 g       *ABS*	00000000 __data_run_size__
080201ac g       *ABS*	00000000 __init_load_start__
08042114 g       .rodata	00000000 __rodata_start__
080374dc g     F .text	0000002c _nx_icmp_queue_process
080380cc g     F .text	0000008c _nx_packet_copy
080239d0 g     F .text	00000080 SingleStepperAxis::configure()
0803b11c g     F .text	00000098 CAN_ITConfig
20012238 g     O .bss	00000004 _tx_mutex_performance_get_count
200121f4 g     O .bss	00000004 _nx_packet_pool_created_count
080382c0 g     F .text	00000008 _nx_packet_length_get
200148f8 g       *ABS*	00000000 __RAM_segment_used_end__
20020000 g       *ABS*	00000000 __SRAM2_segment_end__
08026ae0 g     F .text	000002f0 PLACEPICK_runTask(COMM_CCP_pick_t*, unsigned long, bool)
08049838 g     O .rodata	00002000 bmi270_config_file
0803c828 g     F .text	00000074 SRAM_setOpMode
0803ec38  w    F .text	0000004c roundf
080234bc g     F .text	000000d4 SingleServoAxis::move(float, AXIS_moveType_t, unsigned char, AXIS_mode_t)
08038e40  w    F .text	00000000 SPI1_IRQHandler
0803f6ba  w    F .text	00000000 strcmp
0802514c g     F .text	0000007c DIAGNOSTIC_endianSwapMoveMotorCommand(COMM_DIAGNOSTIC_moveMotor_t*)
080201ba  w    F .init	00000000 PVD_IRQHandler
08020234 g     F .init	00000000 reset_handler
0802288c g     F .text	00000044 assert_failed
080201fa  w    F .init	00000000 TIM5_IRQHandler
0802404c g     F .text	00000068 CCP_sendProgressMessage
0802fdec g     F .text	00000006 HARDWARE_NETWORK_priorityMessageQueueFullDelay
0803b98c g     F .text	00000050 RCC_AHB1PeriphClockCmd
08024c78 g     F .text	000000bc BSB_resetFwVersion
08031458 g     F .text	000000dc NVM_deleteEntry
0804bdf8 g       .ARM.exidx	00000000 __ARM.exidx_start__
080358b0 g     F .text	0000002c CAN1_RX1_IRQ_Handler
0802f3dc g     F .text	00000030 MessageManager::initialize()
00001000 g       *ABS*	00000000 __FSMC_segment_size__
080388ec g     F .text	0000006c _nx_udp_receive_cleanup
20002564 g     O .bss	000000b4 NETWORK_udpThread
0803eb40  w    F .text	00000000 floorf
08022ae0 g     F .text	00000008 Robot::start()
0804bdf8 g       .ARM.exidx	00000000 __exidx_start
0000ffe9 g       *ABS*	00000000 __bss_size__
0803b8fc g     F .text	00000090 RCC_GetClocksFreq
0802277c g     F .text	0000000c DEBUG_registerSubtaskSendFunction
20002504 g       *ABS*	00000000 __bss_load_start__
08038f90 g     F .text	00000050 _tx_event_flags_create
0803f654  w    F .text	00000000 memset
08039ee0 g     F .text	00000000 tx_thread_fpu_disable
0804b92c g     O .rodata	0000000c __RAL_c_locale
0803f768  w    F .text	00000002 __printf_lock
0803e38a  w    F .text	00000000 __floatdisf
080201d2  w    F .init	00000000 ADC_IRQHandler
08030dec g     F .text	0000001a BinManager::isBinState(BinManager::BinState)
08028300 g     F .text	00000004 SM_RUNNER_setComplete
0803e66c  w    F .text	00000000 __aeabi_ddiv
08035138 g     F .text	0000001c GPIO_readPin
50060c00 g       *ABS*	00000000 __AHB2_segment_end__
0802e328 g     F .text	00000024 UTILITIES_initRingBuff
40008000 g       *ABS*	00000000 __APB1_segment_end__
0802e294 g     F .text	00000018 IMU_DRIVER_getDataBuff
0803ed98 g     F .text	0000001c __RAL_print_padding
0802bd5c g     F .text	00000004 TaskManager::setState(TaskManager::State_e)
08025d14 g     F .text	00000020 ATTIC_ENTRY_runTask(unsigned long, bool)
00000000 g       *ABS*	00000000 __NAND2_segment_size__
200123b0 g     O .bss	00000004 _tx_timer_time_slice
08035884 g     F .text	0000002c CAN1_RX0_IRQ_Handler
0802ba84 g     F .text	00000088 SELF_LIFT_runTask(void*, unsigned long, bool)
0803b280 g     F .text	00000020 FLASH_Unlock
08030a3c g     F .text	00000018 AxisTelemetryMonitor::AxisTelemetryMonitor()
20012264 g     O .bss	00000004 _tx_thread_created_count
08047e44 g     O .rodata	00000010 AHBPrescTable
0802a820 g     F .text	000000a8 RECOVERY_runTask(COMM_CCP_recovery_t*, unsigned long, bool)
0802416c g     F .text	00000048 CCP_processRxUsartMessage
0802fa40 g     F .text	00000006 MessageManager::numMessagesToReceive() const
0803e45a  w    F .text	00000000 __extendsfdf2
080420b8 g       .ctors	00000000 __dtors_end__
08020d54 g     F .text	0000013c SYSTEM_printStackInformation
0803ea3c  w    F .text	000000fc fmodf
0804bdf8 g       .rodata	00000000 __rodata_load_end__
08032eb4 g     F .text	00000018 UPG_MNGR_getCurrentTarget
2000e480 g     O .bss	00000001 STATUSLED_activeMotionCommand
08022a90 g     F .text	00000024 Robot::Robot(AxisBase**, unsigned char, Robot::Sensors)
08022994 g     F .text	000000fc LOG_pop
08020220  w    F .init	00000000 CRYP_IRQHandler
080307a0 g     F .text	00000010 CANMNGR_sendMsg
200023c4 g     O .data	00000004 g_turretAxis
0802d368 g     F .text	00000038 SOFTWARE_TIMER_update
08023700 g     F .text	0000005e MultiStepperAxis::getStatus()
20002270 g     O .data	00000004 g_dynamicAxis_4
08040202 g     F .text	00000018 _Unwind_GetLanguageSpecificData
20004c38 g     O .bss	00000002 binTransactionRecord
08031a2c g     F .text	00000050 SystemInit
0001c000 g       *ABS*	00000000 __SRAM1_segment_size__
20002264 g     O .data	00000004 g_dynamicAxis_1
20002268 g     O .data	00000004 g_dynamicAxis_2
0803b758 g     F .text	000000f0 GPIO_WriteBit
0803507c g     F .text	0000002c GPIO_getPinSourceVal
08037d74 g     F .text	0000000c _nx_ip_periodic_timer_entry
200123b4 g     O .bss	0000004c fram_mutex
08025458 g     F .text	00000016 COMM_checkSequenceNumber
08032cec g     F .text	0000015c UPG_MNGR_isRespReceived
080249bc g     F .text	000001a4 NAVCOMMS_processMessage
200124f4 g       .tdata_run	00000000 __tdata_end__
20002304 g     O .data	00000004 g_liftAxisYPos
200124f4 g       *ABS*	00000000 __heap_load_start__
08040194 g     F .text	0000004a decode_eht_entry
0802bce8 g     F .text	00000010 TaskStatus::TaskStatus(TaskStatus const&)
080412c4 g     F .text	00000000 __vfprintf
080305b4 g     F .text	000001ec CANMNGR_enterThread
0802f0cc g     F .text	0000001c CAMERA_adjustPixelCenterOffset(int, int)
0802ff8c g     F .text	00000028 HARDWARE_NETWORK_dequeueReceivedDiagnosticMessage
2000226c g     O .data	00000004 g_dynamicAxis_3
00000000 g       *ABS*	00000000 __STACKSIZE_FIQ__
0803e264 g     F .text	00000096 arm_abs_f32
0803c810 g     F .text	00000018 SRAM_init
080201d0  w    F .init	00000000 DMA1_Stream6_IRQHandler
0803ee26  w    F .text	0000000a islower
08022770 g     F .text	0000000c DEBUG_registerPrintFunction
08035280 g     F .text	00000010 SPI_init
08020000 g       *ABS*	00000000 __vectors_load_start__
0803734c g     F .text	00000014 _nx_icmp_enable
080311c0 g     F .text	00000044 operator new(unsigned int)
00000010 g       *ABS*	00000000 __DBG_segment_size__
00002000 g       *ABS*	00000000 __STACKSIZE__
08034d18 g     F .text	0000000c UART4_IRQ_handler
080201c6  w    F .init	00000000 DMA1_Stream1_IRQHandler
0803f1fc  w    F .text	00000020 rand
0802ca94 g     F .text	00000020 CAMERA_IMAGE_TRANSFER_runTask(void*, unsigned long, bool)
0802f40c g     F .text	00000030 MessageManager::~MessageManager()
00000004 g       *ABS*	00000000 __tbss_size__
0803f2d2  w    F .text	0000003a strncmp
0802522c g     F .text	0000002a DIAGNOSTIC_endianSwapCameraSensorStateData(COMM_DIAGNOSTIC_cameraSensorState_t*)
08034c7c g     F .text	0000000c USART_readCcpUsartData
08023d20 g     F .text	0000007e Articulation::toNexusArticulation(Articulation::State_e)
00000000 g       *ABS*	00000000 __NOR_PSRAM3_segment_size__
08022d60 g     F .text	00000004 AxisBase::setCommandStatus(AXIS_commandStatus_t)
080351c0 g     F .text	00000024 EXTI3_IRQ_Handler
0803f60e  w    F .text	00000000 __aeabi_memcpy4
080201b8  w    F .init	00000000 WWDG_IRQHandler
0802f27c g     F .text	00000134 MessageManager::MessageManager(char const*, COMM_endianOrder_e, void (*)(unsigned char*, unsigned short), void (*)(), void (*)(), void (*)(), unsigned short, unsigned int, unsigned long long)
0802f00c g     F .text	00000084 CAMERA_trigger()
200124ed g       .bss	00000000 __bss_load_end__
08022fb4 g     F .text	00000006 AxisBase::removeDataSubscriber(SubscriberBase*)
08038bf8 g     F .text	00000016 _nx_udp_socket_receive_notify
0803ba78 g     F .text	00000050 RCC_AHB1PeriphResetCmd
08030d2c g     F .text	0000003c BinSensor::readNewData()
0802fe54 g     F .text	0000001c HARDWARE_NETWORK_enqueueReceivedMCMMessage
0802c230 g     F .text	0000006c UPGRADER_runTaskCcpCmdMetaData(void*, unsigned long, bool)
0802f714 g     F .text	00000174 MessageManager::pushReceivedMessage(unsigned char*, unsigned short)
08020232  w    F .init	00000000 DMA2D_IRQHandler
080241c8 g     F .text	0000006c CCP_sendLogLine
0802cab4 g     F .text	00000048 DIAGNOSTIC_TASK_RUNNER_runTask(DIAGNOSTIC_TASK_config_t*, COMM_DIAGNOSTIC_commandMessage_t*, unsigned long, bool)
08031ecc g     F .text	00000120 UPGRADER_eraseCRCKeyIfAny
0803b2f0 g     F .text	00000024 FLASH_WaitForLastOperation
00000000 g       *ABS*	00000000 __dtors_size__
080201ac g       .vectors	00000000 __vectors_load_end__
08038514 g     F .text	0000005a _nx_rarp_packet_deferred_receive
20012280 g     O .bss	00000080 _tx_thread_priority_list
080201fe  w    F .init	00000000 DMA2_Stream0_IRQHandler
0802a120 g     F .text	00000048 INSTANT_HOME_run(COMM_CCP_homingModes_t, unsigned long, bool)
0803f602  w    F .text	00000000 __aeabi_memcpy
20012220 g     O .bss	00000004 _tx_event_flags_created_count
00000000 g       *ABS*	00000000 __PCCARD_segment_size__
0803f60e  w    F .text	00000000 __aeabi_memcpy8
08030d68 g     F .text	00000006 BinSensor::getBufferedState()
0803f35e  w    F .text	00000030 strrchr
08023b00 g     F .text	00000004 Articulation::Articulation(Articulation::State_e)
68000000 g       *ABS*	00000000 __NOR_PSRAM3_segment_end__
0803a974 g     F .text	00000070 _tx_timer_initialize
200124f0 g       *ABS*	00000000 __tbss_load_start__
08030014 g     F .text	0000001c Nest::Nest(float, float (*)(), float (*)())
08020212  w    F .init	00000000 I2C3_EV_IRQHandler
080312a4 g     F .text	0000000c MEMORY_lockAllocationPool()
20009bcc g     O .bss	000000b4 MSGMNGR_thread
00000000 g       *ABS*	00000000 __fast_run_size__
08035208 g     F .text	00000038 EXTI9_5_IRQ_Handler
08020226  w    F .init	00000000 SPI4_IRQHandler
08038cfc g     F .text	00000018 _nx_udp_source_extract
08037804 g     F .text	00000294 _nx_ip_packet_receive
00000000 g       *ABS*	00000000 __non_init_size__
0803087c g     F .text	00000030 Publisher::Publisher()
00004000 g       *ABS*	00000000 __SRAM2_segment_size__
0803d018 g     F .text	0000003a bmi2_get_internal_status
0802c5b0 g     F .text	000000b0 UPGRADER_runTaskCcpCmdFinalize(void*, unsigned long, bool)
08035518 g     F .text	00000002 SPI1_IRQ_handler
1fff7a10 g       *ABS*	00000000 __SYSTEM_segment_end__
0802d698 g     F .text	0000002c IMU_CALIB_zeroAccelerometer
200124ec g     O .bss	00000001 .hidden libunwind::LocalAddressSpace::sThisAddressSpace
0803e89e  w    F .text	00000000 __float32_isnan
080201c8  w    F .init	00000000 DMA1_Stream2_IRQHandler
0803bf04 g     F .text	00000090 USART_Cmd
0802986c g     F .text	00000094 BASEMENT_EXIT_runTask(unsigned long, BASEMENT_EXIT_turretState_t, bool)
0803b2b0 g     F .text	00000040 FLASH_GetStatus
080201c2  w    F .init	00000000 RCC_IRQHandler
080201e4  w    F .init	00000000 I2C1_ER_IRQHandler
08028dac g     F .text	0000004c MOVEXY_runTask(COMM_CCP_moveXY_t*, unsigned long, bool)
08038b34 g     F .text	000000c4 _nx_udp_socket_receive
0803aadc g     F .text	0000002c _tx_timer_system_deactivate
08020bbc g     F .text	00000044 SYSTEM_init
0803f33c  w    F .text	00000022 strnlen
08043d7c g     O .rodata	0000003c vtable for MultiServoAxis
080231f8 g     F .text	00000068 SingleServoAxis::processData(unsigned char, unsigned char*, unsigned short)
20000000 g       .ARM.exidx	00000000 __fast_start__
00000000 g       *ABS*	00000000 __STACKSIZE_ABT__
0803eb38  w    F .text	00000000 fabs(float)
0802cefc g     F .text	00000074 DIAGNOSTIC_TASK_runAsyncTask(void*, unsigned long, bool)
08023440 g     F .text	00000034 SingleServoAxis::SingleServoAxis(char const*, unsigned char, AXIS_config_t*, SingleServoAxis::Config const*, AXIS_motionProfile_t const* const*, unsigned char, bool (*)(unsigned char, unsigned char, unsigned char*, unsigned short), void (*)(float), float (*)())
2001225c g     O .bss	00000004 _tx_build_options
08041010 g     F .text	0000001c unw_get_proc_info
08024374 g     F .text	00000050 MCM_processResponseMessage(COMM_rxMessagePtrs_t)
200124f4 g       .tdata_run	00000000 __non_init_load_end__
20012204 g     O .bss	00000004 _nx_system_build_options_3
200121fc g     O .bss	00000004 _nx_system_build_options_1
20012200 g     O .bss	00000004 _nx_system_build_options_2
0804025c g     F .text	00000008 __aeabi_unwind_cpp_pr1
08037540 g     F .text	000001d8 _nx_ip_create
08030dd4 g     F .text	00000016 BinManager::getNexusBinState()
2001227c g     O .bss	00000004 _tx_thread_preempt_disable
08040270 g     F .text	00000008 __aeabi_unwind_cpp_pr2
08030c5c g     F .text	0000009a BinSensor::processData(void*)
0802ab7c g     F .text	0000002c RECOVERY_moveRecovery(unsigned long, bool, COMM_CCP_recoveryDirection_t)
08040fa8 g     F .text	0000002c unw_get_fpreg
08043e6c g     O .rodata	0000003c vtable for MultiStepperAxis
080412bc g     F .text	00000000 .hidden libunwind::Registers_arm::restoreVFPv3(unsigned long long*)
2000e481 g     O .bss	00000001 STATUSLED_eStop
0802fe08 g     F .text	0000000c HARDWARE_NETWORK_initializeMCM
08034f68 g     F .text	00000114 GPIO_init
08020204  w    F .init	00000000 DMA2_Stream3_IRQHandler
080228d0 g     F .text	00000018 __putchar
08038c10 g     F .text	000000ec _nx_udp_socket_send
080201d6  w    F .init	00000000 TIM1_UP_TIM10_IRQHandler
0803ee3a g     F .text	0000003c __digit
200124f0 g       .tbss	00000000 __tbss_start__
0803ebac  w    F .text	00000000 ldexpf
08040248 g     F .text	00000008 __aeabi_unwind_cpp_pr0
10000000 g       *ABS*	00000000 __DATA_SRAM_segment_start__
0803e368  w    F .text	00000000 __floatunsidf
20002274 g     O .data	00000004 g_staticAxis_1
0802b484 g     F .text	0000004c TORQUE_SHARING_runTask(ROBOT_axisIndex_t, unsigned long, bool)
08036da8 g     F .text	0000005a _nx_arp_packet_deferred_receive
200121f0 g     O .bss	00000004 _nx_ip_created_ptr
0803e9e4  w    F .text	00000058 modff
080238d4 g     F .text	0000001c SingleStepperAxis::getStatus()
0803e41e  w    F .text	00000000 __floatundisf
08032144 g     F .text	00000066 UPG_COMM_packPacket
08035934 g     F .text	00000064 CRC_calculate
0803e45a  w    F .text	00000000 __aeabi_f2d
08033e88 g     F .text	0000000c STATUSLED_IsAutoUpdateEnabled
08030f9c g     F .text	0000010c BinManager::BinManager(BinSensor::State (*)(), BinSensor::State (*)(), BinSensor::State (*)(), BinSensor::State (*)(), void (*)(void*), void*, unsigned short)
40000000 g       *ABS*	00000000 __APB1_segment_start__
20012268 g     O .bss	00000004 _tx_thread_created_ptr
08030cf8 g     F .text	00000034 BinSensor::BinSensor(BinSensor::State (*)(), void (*)(void*), void*, unsigned short)
2001221c g     O .bss	00000004 _tx_byte_pool_created_ptr
2000242c g     O .data	00000004 g_staticWheelArticulationAxis
20002504 g       .data_run	00000000 __data_run_end__
08020216  w    F .init	00000000 OTG_HS_EP1_OUT_IRQHandler
08038d20 g     F .text	00000000 _tx_initialize_low_level
080320c0 g     F .text	00000048 UPG_COMM_init
08039e28 g     F .text	00000000 __tx_PendSVHandler
080238bc g     F .text	00000004 SingleStepperAxis::reset()
20002278 g     O .data	00000004 g_staticAxis_2
080351e4 g     F .text	00000024 EXTI4_IRQ_Handler
200124f4 g       .tdata_run	00000000 __non_init_end__
08023fb0 g     F .text	00000038 CCP_sendDataMessage
080254e8 g     F .text	00000040 ANTCTRL_startTask
0803a0c0 g     F .text	000000ac _tx_thread_system_preempt_check
20012224 g     O .bss	00000004 _tx_event_flags_created_ptr
20000000 g       *ABS*	00000000 __SRAM1_segment_start__
08035880 g     F .text	00000002 CAN1_SCE_IRQ_Handler
08038418 g     F .text	000000b8 _nx_packet_release
0803e42e  w    F .text	00000000 __aeabi_d2uiz
08020206  w    F .init	00000000 DMA2_Stream4_IRQHandler
080309c8 g     F .text	00000004 ProgressMonitor::getIntervals()
08025528 g     F .text	000002ac ANTCTRL_enterThread
200123a8 g     O .bss	00000004 _tx_timer_processing_active
0803c788 g     F .text	00000088 SRAM_write
0803d6a0 g     F .text	00000354 bmi2_set_sensor_config
08024664 g     F .text	00000150 CDM_updateFwVersion
200128f8 g       *ABS*	00000000 __stack_load_start__
08023418 g     F .text	00000028 SingleServoAxis::reset()
0803edce  w    F .text	00000008 abs
08024254 g     F .text	0000002c CCP_setMirrorData
08030964 g     F .text	00000030 Publisher::update(unsigned char*, unsigned short)
08042114 g       .ctors	00000000 __ctors_end__
08040742 g     F .text	00000012 __gnu_unwind_frame
0802381c g     F .text	00000044 MultiStepperAxis::home(AXIS_homeType_t, float)
200124f4 g       .heap	00000000 __heap_start__
0802e3f0 g     F .text	0000000a UTILITIES_isEmptyRx
0803c41c g     F .text	0000007c FRAM_init
08040790 g     F .text	00000008 .hidden abort_message
20002280 g     O .data	00000004 g_staticAxis_4
0802143c g     F .text	0000005c CLI_printCommandHelp(CLI_command_t const*)
200124f4 g       .tdata_run	00000000 __non_init_start__
08029f4c g     F .text	0000005c FULL_HOME_run(COMM_CCP_homingModes_t, unsigned long, bool)
0802fa50 g     F .text	00000230 MessageManager::sendMessage()
080228e8 g     F .text	00000026 LOG_init
08039d98 g     F .text	00000078 _tx_thread_initialize
08030030 g     F .text	000000d4 Nest::setHeight_bins(unsigned char)
0802e4c0 g     F .text	00000030 CAMERA_rxInterruptCallback(unsigned char)
080407b8  w    F .text	00000002 .hidden libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm>::~UnwindCursor()
0802022c  w    F .init	00000000 SAI1_IRQHandler
2000228c g     O .data	00000004 g_z4DAxis
200121ec g     O .bss	00000004 _nx_ip_created_count
08037788 g     F .text	00000036 _nx_ip_loopback_send
0802fcb8 g     F .text	0000001c HARDWARE_NETWORK_enqueuePriorityCCPMessage
0804b958 g     O .rodata	00000031 __RAL_c_locale_abbrev_month_names
08030a54 g     F .text	00000008 AxisTelemetryMonitor::setUpdateInterval(unsigned int)
20012270 g     O .bss	00000004 _tx_thread_execute_ptr
0802ed24 g     F .text	000002dc CAMERA_processResponse()
2000227c g     O .data	00000004 g_staticAxis_3
0802fe2c g     F .text	0000001c HARDWARE_NETWORK_enqueuePriorityMCMMessage
20002290 g     O .data	00000004 g_z4SAxis
00030000 g       *ABS*	00000000 __RAM_segment_size__
08020000 g       .vectors	00000000 __vectors_start__
08024234 g     F .text	0000001e CCP_sendSubtask
08030878  w    F .text	00000002 SubscriberBase::update(unsigned char*, unsigned short)
080276b8 g     F .text	000000d0 ACTIONS_home(bool, ROBOT_axisIndex_t, AXIS_homeType_t, float, float, float, float)
0803e492  w    F .text	00000000 __float64_to_float32
080201e6  w    F .init	00000000 I2C2_EV_IRQHandler
0802c6d0 g     F .text	00000074 UPGRADER_runTaskCcpCmdDataBlock(void*, unsigned long, bool)
0803f780 g     F .text	00000058 __cxa_begin_cleanup
08030b14 g     F .text	00000040 TorqueMonitor::getAverage()
08020000 g       .vectors	00000000 _vectors
08024f20 g     F .text	0000005c DIAGNOSTIC_sendCommandResponse(COMM_DIAGNOSTIC_messageId_e, COMM_responseCodes_t, COMM_DIAGNOSTIC_errorCode_e)
08025470 g     F .text	00000030 ANTCTRL_getXTireDiameter
08038e78  w    F .text	00000000 CAN1_RX0_IRQHandler
1fffc000 g       *ABS*	00000000 __OPTION_segment_start__
08047a04 g     O .rodata	0000000c vtable for TorqueMonitor
e0042010 g       *ABS*	00000000 __DBG_segment_end__
08020e90 g     F .text	000004e8 SYSTEM_checkCrashLog
0804129c g     F .text	00000000 .hidden libunwind::Registers_arm::restoreCoreAndJumpTo()
0803e8b4  w    F .text	00000130 atan(float)
0803a360 g     F .text	00000000 _tx_thread_system_return
08039178 g     F .text	00000214 _tx_event_flags_set
080420b8 g       .text	00000000 __text_load_end__
0802bccc g     F .text	0000000a TaskStatus::TaskStatus(TaskStatus::Result_e)
080201de  w    F .init	00000000 TIM3_IRQHandler
080238a4 g     F .text	00000006 SingleStepperAxis::home(AXIS_homeType_t, float, float, float, float)
0803610c g     F .text	000006c0 ETH_Init
08030914 g     F .text	00000050 Publisher::unsubscribe(SubscriberBase*)
0803f244  w    F .text	00000058 strncasecmp
0802f978 g     F .text	0000007e MessageManager::pushPrioritySendMessage(unsigned char*, unsigned short)
080257d4 g     F .text	00000010 ANTCTRL_setEvent
0802022a  w    F .init	00000000 SPI6_IRQHandler
0802fce0 g     F .text	0000001c HARDWARE_NETWORK_enqueueStandardCCPMessage
0802f1a4 g     F .text	00000010 CAMERA_getImage()
0803eea8  w    F .text	00000014 __aeabi_errno_addr
0803ba28 g     F .text	00000050 RCC_APB2PeriphClockCmd
0804ba08 g     O .rodata	0000003a __RAL_c_locale_day_names
08032bf8 g     F .text	00000058 UPG_MNGR_doFinalConfirm
0803b2a0 g     F .text	00000010 FLASH_Lock
08040e40  w    F .text	00000036 .hidden libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm>::getReg(int)
20002168 g     O .data	00000004 SystemCoreClock
08037a98 g     F .text	000002dc _nx_ip_packet_send
080368d0 g     F .text	00000010 ETH_GetSoftwareResetStatus
20002430 g     O .data	00000004 g_wheelArticulationAxis_xNegLeft
0802b280 g     F .text	00000020 CAMERA_CALIBRATION_runTask(void*, unsigned long, bool)
08037310 g     F .text	0000003a _nx_arp_queue_process
200121e8 g     O .bss	00000004 EthStatus
080349a4 g     F .text	00000024 USART_init
0803c35c g     F .text	000000c0 FIFO_getData
080420b8 g       *ABS*	00000000 __ctors_load_start__
00000400 g       *ABS*	00000000 __heap_size__
0803a860 g     F .text	00000114 _tx_timer_expiration_process
08023b04 g     F .text	00000004 Articulation::get()
0803a9f0 g     F .text	00000000 _tx_timer_interrupt
08022718 g     F .text	00000006 sramRead
0803ca88 g     F .text	000000a6 bmi2_get_regs
080254ac g     F .text	00000030 ANTCTRL_getYTireDiameter
08036010 g     F .text	00000044 nx_driver_stm32f4xx_ethernet_isr
20012320 g     O .bss	00000080 _tx_timer_list
080309a0 g     F .text	00000006 ProgressMonitor::reset()
0803a610 g     F .text	00000170 _tx_thread_time_slice
08023ad8 g     F .text	0000001a SingleStepperAxis::processResponse(unsigned char, unsigned char*, unsigned short)
08039668 g     F .text	00000170 _tx_mutex_get
08038da6  w    F .text	00000000 USART2_IRQHandler
08022fc8 g     F .text	00000014 AxisBase::loadDynamicConfiguration()
080302a4 g     F .text	000000c0 Nest::getBasementPositions()
00000000 g       *ABS*	00000000 __tdata_size__
080201c4  w    F .init	00000000 DMA1_Stream0_IRQHandler
0802753c g     F .text	000000b8 ATTIC_ENTRY_homingErrorHandler(ROBOT_axisIndex_t, unsigned long, bool)
6c000000 g       *ABS*	00000000 __NOR_PSRAM4_segment_start__
08023a50 g     F .text	00000034 SingleStepperAxis::SingleStepperAxis(char const*, unsigned char, AXIS_config_t*, COMM_CDM_MOTOR_torqueSettings_t const*, AXIS_motionProfile_t const* const*, unsigned char, bool (*)(unsigned char, unsigned char, unsigned char*, unsigned short), void (*)(float), float (*)())
08030abc g     F .text	0000002c TorqueMonitor::TorqueMonitor(unsigned short)
20002300 g     O .data	00000004 g_liftAxisYNeg
08037360 g     F .text	00000140 _nx_icmp_packet_process
0804b994 g     O .rodata	00000058 __RAL_c_locale_data
20012240 g     O .bss	00000004 _tx_mutex_performance_put_count
08032108 g     F .text	0000003c UPG_COMM_packPacketNoOptData
080369ec g     F .text	0000003c ETH_DMAReceptionCmd
20000000 g       .vectors	00000000 __vectors_ram_start__
0803519c g     F .text	00000024 EXTI2_IRQ_Handler
08022cec g     F .text	00000064 AxisBase::AxisBase(char const*, unsigned char, AXIS_config_t*, AXIS_motionProfile_t const* const*, unsigned char, bool (*)(unsigned char, unsigned char, unsigned char*, unsigned short), void (*)(float), float (*)())
00000000  w      *UND*	00000000 DMA1_Stream7_IRQHandler
0802fdc8 g     F .text	00000024 HARDWARE_NETWORK_waitMessagesToSend
080240b4 g     F .text	000000b8 CCP_processMessage
08032e48 g     F .text	0000006a UPG_MNGR_processCANRxMessage
0803ef98  w    F .text	00000040 printf
080201ae  w    F .init	00000000 HardFault_Handler
08030ef4 g     F .text	00000026 BinManager::measureBinState()
20012258 g     O .bss	00000004 _tx_semaphore_created_ptr
080291d8 g     F .text	00000038 MOVEXY_transition(ROBOT_axisIndex_t, float, unsigned long, bool)
0803a558 g     F .text	000000b8 _tx_thread_terminate
0803ab08 g     F .text	000000a0 NVIC_Init
0803297c g     F .text	00000018 UPG_MNGR_postProcessUpgrade
00000000  w      *UND*	00000000 TIM6_DAC_IRQHandler
0803dfb8 g     F .text	000002ac bmi270_sensor_enable
080309cc g     F .text	00000010 AxisTelemetryMonitor::reset()
080201cc  w    F .init	00000000 DMA1_Stream4_IRQHandler
08022ae8 g     F .text	0000001a Robot::getAxis(ROBOT_axisIndex_t)
08025148 g     F .text	00000002 DIAGNOSTIC_endianSwapHomeMotorCommand(COMM_DIAGNOSTIC_home_t*)
0803af20 g     F .text	00000130 CAN_Transmit
080245a8 g     F .text	000000bc CDM_resetFwVersion
080201f2  w    F .init	00000000 TIM8_TRG_COM_TIM14_IRQHandler
08031e1c g     F .text	00000004 TX_USER_thread_completed_handler
08023a50 g     F .text	00000034 SingleStepperAxis::SingleStepperAxis(char const*, unsigned char, AXIS_config_t*, COMM_CDM_MOTOR_torqueSettings_t const*, AXIS_motionProfile_t const* const*, unsigned char, bool (*)(unsigned char, unsigned char, unsigned char*, unsigned short), void (*)(float), float (*)())
0802bfdc g     F .text	0000000e TaskManager::isTaskActive()
08020518 g     F .text	00000094 NETWORK_enterUdpThread
0804caa8 g       *ABS*	00000000 __fast_load_start__
0803fef0 g     F .text	000001d0 __gxx_personality_v0
08030abc g     F .text	0000002c TorqueMonitor::TorqueMonitor(unsigned short)
08033e7c g     F .text	0000000c STATUSLED_autoUpdateEnable
080282dc g     F .text	00000022 SM_RUNNER_setError
080203e4 g       .init	00000000 __init_end__
08023f6c g     F .text	00000044 CCP_sendCmdResponse
08035810 g     F .text	00000028 CAN_sendMsg
08025800 g     F .text	0000000c ANTCTRL_getLastTaskPayload
20002288 g     O .data	00000004 g_yAxis
0803b9dc g     F .text	0000004c RCC_APB1PeriphClockCmd
0804ba44 g     O .rodata	00000057 __RAL_c_locale_month_names
20012230 g     O .bss	00000004 _tx_mutex_created_ptr
20003718 g     O .bss	00000024 CLI_events
08020290 g     F .init	00000000 _start
08029ab4 g     F .text	0000003c CONFIGURE_runTask(void*, unsigned long, bool)
08027f1c g     F .text	000003c0 SM_RUNNER_runStateMachine
080309a8 g     F .text	00000018 ProgressMonitor::ProgressMonitor()
080386ac g     F .text	00000240 _nx_udp_packet_receive
0802fcac g     F .text	0000000c HARDWARE_NETWORK_getNumCCPMessagesToSend
50000000 g       *ABS*	00000000 __AHB2_segment_start__
08031a00 g     F .text	00000002 AWARENESS_submitPitchRollData(IMU_pitchRoll_data_t const*)
0802022e  w    F .init	00000000 LTDC_IRQHandler
08035240 g     F .text	00000040 EXTI15_10_IRQ_Handler
08038644 g     F .text	00000066 _nx_udp_free_port_find
08032310 g     F .text	00000508 UPG_COMM_recvCallbackCAN
08035630 g     F .text	00000168 CAN_setup
080247b4 g     F .text	00000104 CDM_processMessage
080278ec g     F .text	000000e4 ACTIONS_move(bool, ROBOT_axisIndex_t, float, AXIS_moveType_t, float, float, float)
0802a284 g     F .text	00000044 LOCATE_updateDeadReckoningRunTask(void*, unsigned long, bool)
08030ae8 g     F .text	00000018 TorqueMonitor::~TorqueMonitor()
20002448 g     O .data	00000004 g_wheelArticulationAxis_yPosLeft
08022a90 g     F .text	00000024 Robot::Robot(AxisBase**, unsigned char, Robot::Sensors)
080201f6  w    F .init	00000000 FMC_IRQHandler
0802bfd0 g     F .text	00000004 TaskManager::getTask()
0803a374 g     F .text	000001e4 _tx_thread_system_suspend
08038e94  w    F .text	00000000 CAN2_TX_IRQHandler
08032edc g     F .text	00000010 UPG_MNGR_setStatusFinalConfirmed
0804035e g     F .text	0000012e _Unwind_VRS_Pop
0803f30c  w    F .text	00000030 strncpy
20000000 g       *ABS*	00000000 __RAM_segment_start__
080349c8 g     F .text	00000140 USART_setup
08024424 g     F .text	00000066 CDM_sendAxis
00000400 g       *ABS*	00000000 __HEAPSIZE__
0802d5f0 g     F .text	00000098 IMU_CALIB_updateAccelerometerBias
080201c0  w    F .init	00000000 FLASH_IRQHandler
200148f8 g       .stack_process	00000000 __stack_process_load_end__
20012218 g     O .bss	00000004 _tx_byte_pool_created_count
6c000000 g       *ABS*	00000000 __NOR_PSRAM4_segment_end__
08038e6a  w    F .text	00000000 CAN1_TX_IRQHandler
08023920 g     F .text	00000064 SingleStepperAxis::home(AXIS_homeType_t, float)
2000244c g     O .data	00000004 g_wheelArticulationAxis_yPosRight
20012250 g     O .bss	00000004 _tx_queue_created_ptr
0803c1cc g     F .text	000000e4 USART_GetFlagStatus
0004efac g       *ABS*	00000000 __FLASH_segment_used_size__
08039500 g     F .text	00000048 _tx_mutex_thread_release
08035998 g     F .text	00000678 nx_driver_stm32f4xx
00000000 g       *ABS*	00000000 __NOR_PSRAM4_segment_size__
00008000 g       *ABS*	00000000 __APB2_segment_size__
20002504 g       .data_run	00000000 __data_run_load_end__
20012210 g     O .bss	00000004 _tx_block_pool_created_count
08038278 g     F .text	00000046 _nx_packet_data_retrieve
00021cd4 g       *ABS*	00000000 __text_size__
080225f0 g     F .text	000000f0 CLI_enterThread
0802bc34 g     F .text	00000098 SELF_LIFT_homingErrorHandler(SELF_LIFT_errorHandler_t, unsigned long, bool)
080201f8  w    F .init	00000000 SDIO_IRQHandler
20002428 g     O .data	00000004 g_dynamicWheelArticulationAxis
0802f0f4 g     F .text	000000b0 CAMERA_requestImage(CAMERA_imageFormat_t, CAMERA_imageSize_t, CAMERA_imageQuality_t)
080203e4 g       *ABS*	00000000 __init_rodata_load_start__
0803e38a  w    F .text	00000000 __int64_to_float32
08027cfc g     F .text	000000a4 ACTIONS_enableTelemetry(bool, ROBOT_axisIndex_t, bool, unsigned int)
08022cac g     F .text	0000003e Robot::isInAttic()
0802bb0c g     F .text	00000128 SELF_LIFT_homingErrorStateMachine(unsigned long)
08025200 g     F .text	0000002a DIAGNOSTIC_endianSwapResponseMessage(COMM_standardResponsePayload_t*)
08038d7c  w    F .text	00000000 __tx_SysTickHandler
080374a0 g     F .text	0000003c _nx_icmp_packet_receive
080236d4 g     F .text	0000002c MultiStepperAxis::configure()
08038e32  w    F .text	00000000 EXTI15_10_IRQHandler
080201ee  w    F .init	00000000 TIM8_BRK_TIM12_IRQHandler
60000000 g       *ABS*	00000000 __NOR_PSRAM1_segment_start__
0802f1ec g     F .text	00000084 MSGMNGR_enterThread
08027bf0 g     F .text	0000002e ACTIONS_resetAll(bool)
08038d98  w    F .text	00000000 USART1_IRQHandler
080201be  w    F .init	00000000 RTC_WKUP_IRQHandler
080203e4 g       .init	00000000 __init_load_end__
08021498 g     F .text	00000098 CLI_executeCommand
08039e28 g     F .text	00000000 __tx_SVCallHandler
08035590 g     F .text	000000a0 CAN_init
20004a24 g     O .bss	00000024 ANTCTRL_events
0803c89c g     F .text	00000068 SRAM_getOpMode
08022ca8 g     F .text	00000004 Robot::setBusVoltage(unsigned char)
0803d3cc g     F .text	00000290 bmi2_get_sensor_data
0804caa8 g       .ARM.exidx	00000000 __exidx_end
08023860 g     F .text	00000040 MultiStepperAxis::MultiStepperAxis(char const*, unsigned char, AXIS_config_t*, COMM_CDM_MOTOR_torqueSettings_t const*, AXIS_motionProfile_t const* const*, unsigned char, SingleStepperAxis**, unsigned char, bool (*)(unsigned char, unsigned char, unsigned char*, unsigned short), void (*)(float), float (*)())
08020340  w    F .init	00000000 exit
0803801c g     F .text	000000b0 _nx_packet_allocate
080201dc  w    F .init	00000000 TIM2_IRQHandler
080201ac g       .vectors	00000000 __vectors_end__
080309c0 g     F .text	00000006 ProgressMonitor::registerUpdateCallback(void (*)(void*), void*)
08030198 g     F .text	00000010 Nest::getStructureHeight()
080248b8 g     F .text	00000102 NAVCOMMS_sendMessage
0803edfc  w    F .text	0000000a __aeabi_atexit
080420b8 g       *ABS*	00000000 __dtors_load_start__
080407f8  w    F .text	00000010 .hidden libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm>::getFunctionName(char*, unsigned int, unsigned int*)
08024ee0 g     F .text	00000040 DIAGNOSTIC_initialize()
08031e18 g     F .text	00000004 TX_USER_thread_started_handler
20002284 g     O .data	00000004 g_xAxis
08030dc8 g     F .text	00000002 BinManager::start()
c0000000 g       *ABS*	00000000 __SDRAM1_segment_end__
0802de74 g     F .text	00000010 IMU_clearIntegratedGyro
0802513c g     F .text	00000002 DIAGNOSTIC_endianSwapReadMotorStatusCommand(COMM_DIAGNOSTIC_readMotorStatus_t*)
08031534 g     F .text	00000222 NVM_write
08030ecc g     F .text	00000026 BinManager::readSensors()
00000000 g       *ABS*	00000000 __stack_process_size__
0802d340 g     F .text	00000004 TIME_getTimeMsec
08030b10 g     F .text	00000004 TorqueMonitor::isFull()
08040808  w    F .text	000004dc .hidden libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm>::getRegisterName(int)
0803e492  w    F .text	00000000 __aeabi_d2f
00000000 g       *ABS*	00000000 __NAND1_segment_size__
0803c560 g     F .text	000000e4 FRAM_write
08037718 g     F .text	0000004c _nx_ip_deferred_link_status_process
0803c01c g     F .text	0000006c USART_ReceiveData
0803c700 g     F .text	00000088 SRAM_read
08020d3c g     F .text	00000018 SYSTEM_registerThread
0802d4d4 g     F .text	000000a4 IMU_PITCHROLL_calculate
0803bac8 g     F .text	00000154 SPI_Init
08032a98 g     F .text	00000054 UPG_MNGR_getItEnterUpgradeMode
200148f8 g       *ABS*	00000000 __stack_process_load_start__
08022f14 g     F .text	00000028 AxisBase::getPosition()
2000243c g     O .data	00000004 g_wheelArticulationAxis_xPosRight
0804b86c g     O .rodata	00000015 bmi270_feat_out
080331a0 g     F .text	00000078 UPG_MNGR_submitTimeStamp
08038e86  w    F .text	00000000 CAN1_SCE_IRQHandler
080233b0 g     F .text	0000002c SingleServoAxis::enableTelemetry(bool, unsigned int)
0802ff3c g     F .text	0000001c HARDWARE_NETWORK_enqueueStandardDiagnosticMessage
080203e4 g       .text	00000000 __init_rodata_end__
0803eb38  w    F .text	00000000 fabsf
08038fe0 g     F .text	000000a4 _tx_event_flags_delete
0803e42e  w    F .text	00000000 __fixunsdfsi
08023060 g     F .text	00000040 MultiServoAxis::MultiServoAxis(char const*, unsigned char, AXIS_config_t*, SingleServoAxis::Config const*, AXIS_motionProfile_t const* const*, unsigned char, SingleServoAxis**, unsigned char, bool (*)(unsigned char, unsigned char, unsigned char*, unsigned short), void (*)(float), float (*)())
08040f44 g     F .text	00000028 unw_get_reg
080201b2  w    F .init	00000000 BusFault_Handler
0802bd3c g     F .text	00000020 TaskManager::TaskManager()
08040778 g     F .text	00000000 .hidden libunwind::Registers_arm::saveVFPWithFSTMD(unsigned long long*)
080201bc  w    F .init	00000000 TAMP_STAMP_IRQHandler
0804048c g     F .text	0000029e _Unwind_VRS_Interpret
20000000 g       .vectors	00000000 __vectors_ram_load_end__
08034d00 g     F .text	0000000c UART2_IRQ_handler
200124cc g     O .bss	00000004 .hidden __dso_handle
08020222  w    F .init	00000000 HASH_RNG_IRQHandler
08021378 g     F .text	00000090 recordFault(SYSTEM_stackState_t*)
080238f0 g     F .text	00000004 SingleStepperAxis::processData(unsigned char, unsigned char*, unsigned short)
08040d24  w    F .text	0000003a .hidden libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm>::jumpto()
1fff0000 g       *ABS*	00000000 __SYSTEM_segment_start__
08032fa0 g     F .text	00000200 UPG_MNGR_confirmAppVersion
08032818 g     F .text	00000044 UPG_COMM_readPacket
08039d40 g     F .text	00000058 _tx_thread_delete
0803b42c g     F .text	00000150 GPIO_Init
20012304 g     O .bss	00000004 _tx_thread_system_stack_ptr
0803f898 g     F .text	00000008 __cxa_get_globals
00000000 g       *ABS*	00000000 __STACKSIZE_UND__
0804103c g     F .text	0000000a unw_save_vfp_as_X
0803a7c4 g     F .text	00000018 _tx_time_get
08040d5e  w    F .text	00000074 .hidden libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm>::step()
80000000 g       *ABS*	00000000 __NAND2_segment_start__
0802020e  w    F .init	00000000 DMA2_Stream6_IRQHandler
0803c2bc g     F .text	0000009e FIFO_addData
0804b89c g     O .rodata	00000080 __RAL_ascii_ctype_map
0803f29c  w    F .text	00000036 strncat
08027808 g     F .text	000000d8 ACTIONS_move(bool, ROBOT_axisIndex_t, float, AXIS_moveType_t, AXIS_mode_t)
0803e500  w    F .text	00000000 __aeabi_dmul
08047be4 g     O .rodata	0000002c vtable for HardwareBinManager
08029210 g     F .text	00000280 MOVEXY_autoWheelCalibration(ROBOT_axisIndex_t, float, float)
0803a080 g     F .text	00000024 _tx_thread_stack_error_handler
08025144 g     F .text	00000002 DIAGNOSTIC_endianSwapPowerMotorCommand(COMM_DIAGNOSTIC_powerMotor_t*)
0802a724 g     F .text	00000058 LAUNCH_runTask(void*, unsigned long, bool)
20012278 g     O .bss	00000004 _tx_thread_mutex_release
20012234 g     O .bss	00000004 _tx_mutex_performance__priority_inheritance_count
0803d2a4 g     F .text	000000ba bmi2_get_feat_config
080238bc g     F .text	00000004 SingleStepperAxis::stop()
2001226c g     O .bss	00000004 _tx_thread_current_ptr
080201b6  w    F .init	00000000 DebugMon_Handler
08022eec g     F .text	00000028 AxisBase::convertToEncoderCounts(float)
200124d0 g     O .bss	00000004 __user_format_extender
080203e4 g       .text	00000000 __init_rodata_load_end__
0803116c g     F .text	00000014 HardwareBinManager::start()
08037508 g     F .text	00000038 _nx_igmp_multicast_check
000001ac g       *ABS*	00000000 __vectors_size__
0803c2b0 g     F .text	0000000c FIFO_initBuffer
0803c088 g     F .text	00000144 USART_ITConfig
0803bf94 g     F .text	00000088 USART_SendData
08038338 g     F .text	000000cc _nx_packet_pool_create
0804efac g       *ABS*	00000000 __tdata_load_start__
0803938c g     F .text	000000a0 _tx_initialize_high_level
0802141c g     F .text	00000020 CLI_init
0803ec30  w    F .text	00000000 sqrtf
200124f4 g       *ABS*	00000000 __non_init_load_start__
08031124 g     F .text	00000024 HardwareBinManager::readNegXNegY()
080400c0 g     F .text	0000000c __cxa_pure_virtual
0803bd18 g     F .text	000001ec USART_Init
20000078 g     O .data	00000004 wheelArtOutPosition
0802f1b4 g     F .text	00000008 CAMERA_getImageQualityInt(CAMERA_imageQuality_t)
08032cb0 g     F .text	0000003c UPG_MNGR_reboot
00000000 g       *ABS*	00000000 __fast_size__
0802fd30 g     F .text	00000028 HARDWARE_NETWORK_dequeueReceivedCCPMessage
a0001000 g       *ABS*	00000000 __FSMC_segment_end__
00080000 g       *ABS*	00000000 __AHB1_segment_size__
0803285c g     F .text	000000fc UPG_MNGR_initManager
0803ed64 g     F .text	00000034 __putc
08038a9c g     F .text	00000098 _nx_udp_socket_create
0802e2cc g     F .text	0000005a UTILITIES_strSplit
0803942c g     F .text	0000003c _tx_initialize_kernel_enter
080420b8 g       .text	00000000 __text_end__
08030f1c g     F .text	00000080 BinManager::processBinState(void*)
08038570 g     F .text	00000054 _nx_system_initialize
0802d344 g     F .text	0000000c TIME_getElapsedTimeMsec
0803082c g     F .text	00000020 CANMNGR_NumMsgSrcPending
080397d8 g     F .text	000000c0 _tx_mutex_prioritize
200128f4 g       .heap	00000000 __heap_end__
20012318 g     O .bss	00000004 _tx_timer_expired_time_slice
0802bcd8 g     F .text	00000010 TaskStatus::TaskStatus(TaskStatus::Result_e, unsigned int)
080233dc g     F .text	0000003c SingleServoAxis::stop()
2001212c g     O .bss	000000bc ETH_InitStructure
10010000 g       *ABS*	00000000 __DATA_SRAM_segment_end__
20012300 g     O .bss	00000004 _tx_thread_priority_maps
08027794 g     F .text	00000074 ACTIONS_homeList(bool, ROBOT_axisIndex_t const*, AXIS_homeType_t*, float*, float*, float*, float*, unsigned char)
0803b1b4 g     F .text	000000cc EXTI_Init
08031a7c g     F .text	00000070 SystemCoreClockUpdate
08031fec g     F .text	000000d4 UPGRADER_enterUpdateMode
00000cb0 g       *ABS*	00000000 __ARM.exidx_size__
08033e6c g     F .text	00000010 STATUSLED_autoUpdateInitialize
08030a88 g     F .text	00000032 TorqueMonitor::update(unsigned char*, unsigned short)
080236c0 g     F .text	00000012 SingleServoAxis::configure()
080203e4 g       .text	00000000 __init_rodata_start__
0804b98c g     O .rodata	00000007 __RAL_c_locale_am_pm_indicator
08039b90 g     F .text	00000000 _tx_thread_context_restore
080407f2  w    F .text	00000006 .hidden libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm>::isSignalFrame()
0804ba9c g     O .rodata	00000009 __RAL_c_locale_time_format
0803e500  w    F .text	00000000 __muldf3
0803cde4 g     F .text	0000006e bmi2_set_adv_power_save
08036054 g     F .text	0000001a ETH_DeInit
20000000 g       .ARM.exidx	00000000 __fast_end__
0802d688 g     F .text	00000010 IMU_CALIB_getPitchRollBias
08020218  w    F .init	00000000 OTG_HS_EP1_IN_IRQHandler
08031204 g     F .text	00000002 operator delete[](void*)
0803087c g     F .text	00000030 Publisher::Publisher()
08029b94 g     F .text	00000074 HOME_runTask(COMM_CCP_home_t*, unsigned long, bool)
0802433c g     F .text	00000038 MCM_send
0802e34c g     F .text	0000005a UTILITIES_popRingBuff
20030000 g       *ABS*	00000000 __SRAM3_segment_end__
08022b08 g     F .text	0000008c Robot::getAxisStatus(ROBOT_axisIndex_t, AXIS_status_t*)
0802cf70 g     F .text	0000000e NO_TASK_respondComplete(void*, unsigned long, bool)
08022910 g     F .text	00000082 LOG_write
080395a8 g     F .text	000000c0 _tx_mutex_delete
20000000 g       .fast_run	00000000 __fast_run_start__
08034c48 g     F .text	00000034 USART_sendCcpUsartData
08023760 g     F .text	00000052 MultiStepperAxis::move(float, AXIS_moveType_t, unsigned char, AXIS_mode_t)
08035878 g     F .text	00000002 CAN1_TX_IRQ_Handler
0802a238 g     F .text	0000004c LOCATE_runTask(void*, unsigned long, bool)
08023da0 g     F .text	00000004 Articulation::operator unsigned int() const
08032eec g     F .text	00000010 UPG_MNGR_setStatusUpgradeDone
0802d228 g     F .text	00000048 BUFFER_PICKPLACE_runTask(void*, unsigned long, bool)
080412b4 g     F .text	00000000 .hidden libunwind::Registers_arm::restoreVFPWithFLDMX(unsigned long long*)
08032a10 g     F .text	00000088 UPG_MNGR_storeDataBlock
08037228 g     F .text	000000e8 _nx_arp_periodic_update
08025084 g     F .text	00000048 DIAGNOSTIC_sendDataMessage(COMM_DIAGNOSTIC_messageId_e, unsigned char*, unsigned short)
08022c78 g     F .text	00000018 Robot::getAxisName(ROBOT_axisIndex_t)
0803ed20 g     F .text	00000044 __RAL_pow10f
00009ce4 g       *ABS*	00000000 __rodata_size__
08027b34 g     F .text	0000001c ACTIONS_powerAllAxis(bool, AXIS_powerState_t)
20012244 g     O .bss	00000004 _tx_mutex_performance_suspension_count
080479e4 g     O .rodata	00000010 vtable for ProgressMonitor
00007a10 g       *ABS*	00000000 __SYSTEM_segment_size__
200124f4 g       .tbss	00000000 __tbss_end__
080367cc g     F .text	00000064 ETH_MACTransmissionCmd
08030b00 g     F .text	00000010 TorqueMonitor::reset()
080350a8 g     F .text	00000084 GPIO_setupExtiInterrupt
080205ac g     F .text	00000404 NETWORK_init
0802f0e8 g     F .text	0000000a CAMERA_activateProfile(CAMERA_configProfile_t)
20011578 g     O .bss	0000004c crc_mutex
08022710 g     F .text	00000006 sramWrite
0803d054 g     F .text	0000016c bmi2_write_config_file
08027eb0 g     F .text	0000006c SM_RUNNER_timeoutCallback
0802ff18 g     F .text	0000000c HARDWARE_NETWORK_initializeDiagnostic
0804072a g     F .text	00000018 _Unwind_GetRegionStart
08036070 g     F .text	0000009c ETH_StructInit
08031758 g     F .text	00000080 NVM_load
08020208  w    F .init	00000000 ETH_WKUP_IRQHandler
08032994 g     F .text	0000000c UPG_MNGR_updateTargetDevicePorts
08030e08 g     F .text	00000028 BinManager::getStateString(BinManager::BinState)
00000000 g       *ABS*	00000000 __SDRAM2_segment_size__
0804b938 g     O .rodata	0000001d __RAL_c_locale_abbrev_day_names
08040f6c g     F .text	0000003c unw_set_reg
20012314 g     O .bss	00000004 _tx_timer_expired
08022b04 g     F .text	00000004 Robot::getStatus()
080275f4 g     F .text	000000b8 ACTIONS_home(bool, ROBOT_axisIndex_t, AXIS_homeType_t, float)
0802fdb8 g     F .text	00000010 HARDWARE_NETWORK_notifyMessagesToSend
08038dfa  w    F .text	00000000 EXTI2_IRQHandler
00002000 g       *ABS*	00000000 __stack_size__
08039468 g     F .text	00000098 _tx_mutex_cleanup
0803bc1c g     F .text	00000018 SPI_StructInit
20012310 g     O .bss	00000004 _tx_timer_current_ptr
08023a84 g     F .text	00000052 SingleStepperAxis::processStatusResponse(COMM_CDM_response_t*)
70000000 g       *ABS*	00000000 __NAND1_segment_end__
0803e2fc g     F .text	0000006c arm_mean_f32
20005510 g     O .bss	00000024 IMU_events
20002440 g     O .data	00000004 g_wheelArticulationAxis_yNegLeft
08040788 g     F .text	00000000 .hidden libunwind::Registers_arm::saveVFPv3(unsigned long long*)
0802020a  w    F .init	00000000 OTG_FS_IRQHandler
0802d578 g     F .text	00000078 IMU_PITCHROLL_computeBias
08028304 g     F .text	0000000e SM_RUNNER_restart
00000000 g     F *ABS*	00000000 __vfscanf
40010000 g       *ABS*	00000000 __APB2_segment_start__
00000000  w      *UND*	00000000 UART5_IRQHandler
08031208 g     F .text	00000090 MEMORY_viewPoolStatistics()
08040fd4 g     F .text	00000030 unw_set_fpreg
08043ea8 g     O .rodata	0000003c vtable for SingleStepperAxis
080226e0 g     F .text	00000030 CLI_dataReadyCallback
0803512c g     F .text	0000000a GPIO_setPins
080262bc g     F .text	00000050 PICK_BIN_runTask(unsigned long, PICK_BIN_config_t, bool)
08022d64 g     F .text	00000004 AxisBase::setCommandExtraStatus(unsigned int)
40020000 g       *ABS*	00000000 __AHB1_segment_start__
0803ecec g     F .text	0000000e __RAL_ascii_wctomb
0803ee30  w    F .text	0000000a isdigit
080201ce  w    F .init	00000000 DMA1_Stream5_IRQHandler
00000000  w      *UND*	00000000 UART8_IRQHandler
200148f8 g       .stack	00000000 __stack_end__
08031180 g     F .text	00000040 HardwareBinManager::HardwareBinManager(void (*)(void*), void*, unsigned short, unsigned int)
00000000 g       *ABS*	00000000 __NOR_PSRAM1_segment_size__
08027af0 g     F .text	00000044 ACTIONS_powerList(bool, ROBOT_axisIndex_t const*, unsigned char, AXIS_powerState_t)
08023b08 g     F .text	00000128 Articulation::toString(Articulation::State_e)
080368e0 g     F .text	00000058 ETH_DMAITConfig
0803ec38  w    F .text	0000004c round(float)
0803f900 g     F .text	00000038 std::terminate()
08023990 g     F .text	0000003e SingleStepperAxis::move(float, AXIS_moveType_t, unsigned char, AXIS_mode_t)
e0100000 g       *ABS*	00000000 __PPB_segment_end__
08030cf8 g     F .text	00000034 BinSensor::BinSensor(BinSensor::State (*)(), void (*)(void*), void*, unsigned short)
08022798 g     F .text	000000f4 DEBUG_logMsg
080400cc  w    F .text	00000008 operator new[](unsigned int)
08036938 g     F .text	00000048 ETH_FlushTransmitFIFO
08039f50 g     F .text	00000060 _tx_thread_sleep
08039898 g     F .text	000000bc _tx_mutex_priority_change
20002434 g     O .data	00000004 g_wheelArticulationAxis_xNegRight
08027a4c g     F .text	000000a4 ACTIONS_power(bool, ROBOT_axisIndex_t, AXIS_powerState_t)
080201e0  w    F .init	00000000 TIM4_IRQHandler
08042114 g       .ctors	00000000 __ctors_load_end__
08038db4  w    F .text	00000000 USART3_IRQHandler
20002504 g       .bss	00000000 __bss_start__
2000f630 g     O .bss	00000010 robot
080230a0 g     F .text	00000016 SingleServoAxis::home(AXIS_homeType_t, float)
08023680 g     F .text	00000040 SingleServoAxis::setTorqueLimits()
08020d14 g     F .text	00000018 SYSTEM_areThreadsRunning
20012260 g     O .bss	00000004 _tx_thread_application_stack_error_handler
08022c90 g     F .text	00000004 Robot::getBusVoltage()
0804caa8 g       .ARM.exidx	00000000 __ARM.exidx_end__
2000245c g     O .data	0000006b _nx_version_id
08040760 g     F .text	00000000 unw_getcontext
08027cc0 g     F .text	0000003a ACTIONS_stopList(bool, ROBOT_axisIndex_t const*, unsigned char)
200124f4 g       .tdata_run	00000000 __tdata_run_start__
2001222c g     O .bss	00000004 _tx_mutex_created_count
08037764 g     F .text	0000000e _nx_ip_driver_deferred_processing
0804baa8 g     O .rodata	00000020 __RAL_codeset_ascii
08036830 g     F .text	00000064 ETH_MACReceptionCmd
00000000  w      *UND*	00000000 UART7_IRQHandler
0803f828 g     F .text	00000070 __cxa_begin_catch
0803a040 g     F .text	00000000 _tx_thread_stack_build
0803ec30  w    F .text	00000000 sqrt(float)
08030d70 g     F .text	00000056 BinSensor::reset()
64000000 g       *ABS*	00000000 __NOR_PSRAM2_segment_start__
0803e368  w    F .text	00000000 __uint32_to_float64
08031100 g     F .text	00000024 HardwareBinManager::readNegXPosY()
c0000000 g       *ABS*	00000000 __SDRAM1_segment_start__
20002438 g     O .data	00000004 g_wheelArticulationAxis_xPosLeft
0804b9ec g     O .rodata	00000009 __RAL_c_locale_date_format
08030a68 g     F .text	00000006 AxisTelemetryMonitor::resetOnUpdate()
0802bfd4 g     F .text	00000004 TaskManager::getLastTask()
08022720 g     F .text	00000050 DEBUG_init
08000000 g       *ABS*	00000000 __FLASH_segment_start__
200148f8 g       .stack	00000000 __stack_load_end__
00008000 g       *ABS*	00000000 __APB1_segment_size__
080201d8  w    F .init	00000000 TIM1_TRG_COM_TIM11_IRQHandler
0802fd08 g     F .text	0000001c HARDWARE_NETWORK_enqueueReceivedCCPMessage
0802d324 g     F .text	0000001c TIME_disableTimer
08034e34 g     F .text	0000000c HWM_getRandomNum
08020214  w    F .init	00000000 I2C3_ER_IRQHandler
080201ac  w    F .init	00000000 NMI_Handler
08036c50 g     F .text	000000a0 _nx_arp_enable
080230c8 g     F .text	0000001c SingleServoAxis::getStatus()
2000f4d8 g     O .bss	000000e4 binManager
08039bf8 g     F .text	00000148 _tx_thread_create
08022fbc g     F .text	0000000a AxisBase::updateDynamicMechanicalRatio(float)
0802a460 g     F .text	0000007c PRELAUNCH_runTask(void*, unsigned long, bool)
00000000 g       *ABS*	00000000 __vectors_ram_size__
08023fe8 g     F .text	00000038 CCP_sendPriorityMessage
08032c50 g     F .text	00000060 UPG_MNGR_activateNewImage
08035154 g     F .text	00000024 EXTI0_IRQ_Handler
0804efac g       *ABS*	00000000 __FLASH_segment_used_end__
0802eb14 g     F .text	00000014 CAMERA_isDataAvailable()
00060c00 g       *ABS*	00000000 __AHB2_segment_size__
080201ac g       .init	00000000 __init_start__
0802ff64 g     F .text	0000001c HARDWARE_NETWORK_enqueueReceivedDiagnosticMessage
200024c8 g     O .data	00000004 _tx_thread_system_state
0803f5e6  w    F .text	0000001c vsnprintf
08040e76  w    F .text	00000068 .hidden libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm>::getFloatReg(int)
20002444 g     O .data	00000004 g_wheelArticulationAxis_yNegRight
08022ab4 g     F .text	00000006 Robot::getArticulation()
08200000 g       *ABS*	00000000 __FLASH_segment_end__
0802f090 g     F .text	0000000c CAMERA_stop()
0802432c g     F .text	00000010 MCM_init
0803e66c  w    F .text	00000000 __float64_div
20000000 g       .vectors	00000000 __vectors_ram_end__
08034d24 g     F .text	0000000c UART6_IRQ_handler
0803edd8  w    F .text	00000024 atexit
200123a0 g     O .bss	00000004 _tx_timer_list_end
080201d4  w    F .init	00000000 TIM1_BRK_TIM9_IRQHandler
08022d5c g     F .text	00000004 AxisBase::getID()
0802eb34 g     F .text	000001d0 CAMERA_processRxEvent()
0803ee80  w    F .text	00000014 tolower
20000000 g       .fast_run	00000000 __fast_run_end__
080243c4 g     F .text	00000060 MCM_processMessage
0803b848 g     F .text	000000b4 GPIO_PinAFConfig
080321ac g     F .text	00000164 UPG_COMM_sendPacket
080230b8 g     F .text	00000010 SingleServoAxis::isOvertorque()
08035908 g     F .text	0000002c CAN2_RX1_IRQ_Handler
200024ec g     O .data	00000014 __RAL_global_locale
200128f8 g       .stack	00000000 __stack_start__
20002294 g     O .data	00000004 g_z8Axis
080382c8 g     F .text	00000070 _nx_packet_pool_cleanup
00100000 g       *ABS*	00000000 __PPB_segment_size__
080309dc g     F .text	0000005e AxisTelemetryMonitor::update(unsigned char*, unsigned short)
08030a3c g     F .text	00000018 AxisTelemetryMonitor::AxisTelemetryMonitor()
08031180 g     F .text	00000040 HardwareBinManager::HardwareBinManager(void (*)(void*), void*, unsigned short, unsigned int)
080238ac g     F .text	00000010 SingleStepperAxis::move(float, AXIS_moveType_t, unsigned char, float, float, float)
d0000000 g       *ABS*	00000000 __SDRAM2_segment_start__
0803b650 g     F .text	00000084 GPIO_SetBits
08031a04 g     F .text	00000028 AWARENESS_getAlarmData(IMU_unsolictedAlarm_t)
0802c36c g     F .text	00000094 UPGRADER_runTaskCcpCmdStartUpgrade(void*, unsigned long, bool)
08024f7c g     F .text	00000108 DIAGNOSTIC_processCommandMessage()
08025140 g     F .text	00000002 DIAGNOSTIC_endianSwapResetMotorCommand(COMM_DIAGNOSTIC_resetMotor_t*)
08022d74 g     F .text	0000016c AxisBase::estimateMoveTime(float, unsigned char, AXIS_mode_t)
080307b0 g     F .text	0000007c CANMNGR_readMsgSrc
08032aec g     F .text	00000080 UPG_MNGR_sendMetaData
08023440 g     F .text	00000034 SingleServoAxis::SingleServoAxis(char const*, unsigned char, AXIS_config_t*, SingleServoAxis::Config const*, AXIS_motionProfile_t const* const*, unsigned char, bool (*)(unsigned char, unsigned char, unsigned char*, unsigned short), void (*)(float), float (*)())
080346d4  w    F .text	00000030 HardwareBinManager::~HardwareBinManager()
08038e08  w    F .text	00000000 EXTI3_IRQHandler
0802fe14 g     F .text	0000000c HARDWARE_NETWORK_sendMCMMessage
080412c4 g     F .text	00000df4 __vfprintf_short_float_long
20000000 g       .data	00000000 __data_start__
080201e8  w    F .init	00000000 I2C2_ER_IRQHandler
08039084 g     F .text	000000f4 _tx_event_flags_get
200124e8 g     O .bss	00000004 __cxa_unexpected_handler
20000000 g       *ABS*	00000000 __vectors_ram_load_start__
20003d0c g     O .bss	0000004c debug_mutex
0804bcdc  w    O .rodata	00000048 .hidden vtable for libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm>
08024d34 g     F .text	00000150 BSB_updateFwVersion
0803c644 g     F .text	000000bc FRAM_writeTest
0803ee1c  w    F .text	0000000a isupper
200024dc g     O .data	00000010 bmi270_map_int
080257e4 g     F .text	00000010 ANTCTRL_getLastTaskId
08038eb0  w    F .text	00000000 CAN2_RX0_IRQHandler
080407d6  w    F .text	0000001c .hidden libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm>::getInfo(unw_proc_info_t*)
0804bad0 g     O .rodata	00000010 __RAL_hex_lc
20012214 g     O .bss	00000004 _tx_block_pool_created_ptr
0802862c g     F .text	00000048 ATTIC_EXIT_runTask(unsigned long, ATTIC_EXIT_stage_t, bool)
20004a48 g     O .bss	000000b4 ANTCTRL_thread
20012208 g     O .bss	00000004 _nx_system_build_options_4
0803ee08 g     F .text	00000014 __RAL_isctype
08024e84 g     F .text	0000005a BSB_processMessage
08038f08 g     F .text	00000088 _tx_event_flags_cleanup
0802d2cc g     F .text	00000058 TIME_setTimeout
2001220c g     O .bss	00000004 _nx_system_build_options_5
00000000 g       *ABS*	00000000 __STACKSIZE_PROCESS__
08021408 g     F .text	00000014 SYSTEM_stackFaultHandler
0803ee94  w    F .text	00000014 toupper
08030a70  w    F .text	00000016 int algorithms::helpers::sort_descending<int>(void const*, void const*)
080238a0 g     F .text	00000004 SingleStepperAxis::enableTelemetry(bool, unsigned int)
08030a5c g     F .text	0000000c AxisTelemetryMonitor::setEncoderCount(int)
20002504 g       .data	00000000 __data_end__
08020d2c g     F .text	00000010 SYSTEM_setThreadFlag
0803ce54 g     F .text	000000fc bmi2_set_int_pin_config
0802e2ac g     F .text	00000020 IMU_DRIVER_resume
08024280 g     F .text	0000007c CCP_pushMirrorData
08020202  w    F .init	00000000 DMA2_Stream2_IRQHandler
2001230c g     O .bss	00000004 _tx_timer_created_ptr
080358dc g     F .text	0000002c CAN2_RX0_IRQ_Handler
08043e30 g     O .rodata	0000003c vtable for SingleServoAxis
200148f8 g       .stack_process	00000000 __stack_process_end__
0803cf74 g     F .text	000000a4 bmi2_map_data_int
08022f6c g     F .text	00000040 AxisBase::getMotionProfile(unsigned char, AXIS_mode_t)
0803f5c6  w    F .text	00000020 atoi
0804efac g       *ABS*	00000000 __data_load_end__
000148f8 g       *ABS*	00000000 __RAM_segment_used_size__
08030104 g     F .text	0000000a Nest::setAtticOffset(float)
08020200  w    F .init	00000000 DMA2_Stream1_IRQHandler
080203e4 g       *ABS*	00000000 __text_load_start__
08041254  w    F .text	00000048 .hidden libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm>::setInfoBasedOnIPRegister(bool)
80000000 g       *ABS*	00000000 __NAND2_segment_end__
00002504 g       *ABS*	00000000 __data_size__
0803e66c  w    F .text	00000000 __divdf3
080312b0 g     F .text	000000b4 NVM_format
08025364 g     F .text	000000f4 COMM_packNetworkMsg
08023030 g     F .text	00000030 MultiServoAxis::configure()
0802d350 g     F .text	00000016 SOFTWARE_TIMER_initialize
0803a7dc g     F .text	00000084 _tx_timer_create
08030014 g     F .text	0000001c Nest::Nest(float, float (*)(), float (*)())
08037774 g     F .text	00000014 _nx_ip_initialize
080301a8 g     F .text	000000f0 Nest::getAtticPositions()
0804bdf8 g       .rodata	00000000 __rodata_end__
08039efc g     F .text	00000054 _tx_thread_shell_entry
08027118 g     F .text	00000054 PLACE_BIN_runTask(unsigned long, PLACE_BIN_config_t, bool)
08022fdc g     F .text	00000052 MultiServoAxis::getStatus()
08020224  w    F .init	00000000 FPU_IRQHandler
0803bca4 g     F .text	00000054 SYSCFG_EXTILineConfig
2000261c g     O .bss	000007a8 nx_ip0
0802021e  w    F .init	00000000 DCMI_IRQHandler
2000a314 g     O .bss	000000b4 CANMNGR_thread
2001c000 g       *ABS*	00000000 __SRAM2_segment_start__
0802bd60 g     F .text	0000025c TaskManager::startTask(COMM_source_t, unsigned char, unsigned char*, unsigned short, Articulation::State_e, unsigned char)
080346d4  w    F .text	00000030 HardwareBinManager::~HardwareBinManager()
08034d0c g     F .text	0000000c UART3_IRQ_handler
08047b98 g     O .rodata	0000002c vtable for BinManager
08022d6c g     F .text	00000006 AxisBase::getMechanicalRatio()
08030110 g     F .text	00000088 Nest::getShelfHeight(unsigned char)
0804bacc g     O .rodata	00000002 __RAL_data_utf8_period
08038ebe  w    F .text	00000000 CAN2_RX1_IRQHandler
08035178 g     F .text	00000024 EXTI1_IRQ_Handler
08037d80 g     F .text	00000094 _nx_ip_route_find
0802f43c g     F .text	000002d8 MessageManager::popReceivedMessage(unsigned char*, unsigned short, unsigned short*)
080201e2  w    F .init	00000000 I2C1_EV_IRQHandler
2000e482 g     O .bss	00000001 STATUSLED_lowPower
080201da  w    F .init	00000000 TIM1_CC_IRQHandler
0803b6d4 g     F .text	00000084 GPIO_ResetBits
0803aa88 g     F .text	00000054 _tx_timer_system_activate
0802c160 g     F .text	00000058 POWERMODE_runTask(void*, unsigned long, bool)
200148f8 g       .stack_process	00000000 __stack_process_start__
080402f4 g     F .text	0000006a _Unwind_VRS_Get
00010000 g       *ABS*	00000000 __DATA_SRAM_segment_size__
00000000 g       *ABS*	00000000 __NOR_PSRAM2_segment_size__
0803ad74 g     F .text	00000154 CAN_FilterInit
0803e3aa  w    F .text	00000000 __int64_to_float32_common
0803ebf4  w    F .text	00000000 frexpf
080401de g     F .text	00000024 _Unwind_Resume
08034c10 g     F .text	00000038 USART_send
20020000 g       *ABS*	00000000 __SRAM3_segment_start__
0802bcf8 g     F .text	00000012 TaskStatus::operator=(TaskStatus const&)
0803ee76  w    F .text	0000000a isspace
08035838 g     F .text	00000040 CAN_readMessage
20003d5c g     O .bss	00000068 sramLogBuffer
08038e5c  w    F .text	00000000 SPI3_IRQHandler
08031b34 g     F .text	000002e4 tx_application_define
0803f390  w    F .text	00000190 strtof
08030dcc g     F .text	00000006 BinManager::getBinState()
080420b8 g       .ctors	00000000 __dtors_load_end__
08025264 g     F .text	00000100 COMM_unpackNetworkMsg
200123ac g     O .bss	00000004 _tx_timer_system_clock
080201b4  w    F .init	00000000 UsageFault_Handler
08023c30 g     F .text	000000f0 Articulation::transition(Articulation::State_e)
0802d270 g     F .text	0000005c TIME_enterThread
0803bcf8 g     F .text	00000020 SYSCFG_ETH_MediaInterfaceConfig
00000000 g       *ABS*	00000000 __SDRAM1_segment_size__
200124ed g       .bss	00000000 __bss_end__
0803e500  w    F .text	00000000 __float64_mul
08035520 g     F .text	00000002 SPI3_IRQ_handler
0000005c g       *ABS*	00000000 __ctors_size__
080251cc g     F .text	0000002a DIAGNOSTIC_endianSwapEnableMotorAsyncDataCommand(COMM_DIAGNOSTIC_enableMotorAsyncData_t*)
0803f8a8 g     F .text	00000020 std::get_terminate()
08034d30 g     F .text	000000d4 HWM_pwrp
080230e4 g     F .text	00000114 SingleServoAxis::processResponse(unsigned char, unsigned char*, unsigned short)
0802f000 g     F .text	0000000c CAMERA_isImageRequested()
0802021c  w    F .init	00000000 OTG_HS_IRQHandler
0802b4d0 g     F .text	00000128 TORQUE_SHARING_getSecondaryAxisHomingTorque(ROBOT_axisIndex_t)
080201ca  w    F .init	00000000 DMA1_Stream3_IRQHandler
20002450 g     O .data	00000004 gBinManager
080319e0 g     F .text	00000020 AWARENESS_submitAlarmData(IMU_unsolictedAlarm_t, IMU_f_xyz_t*, unsigned int)
08038efc  w      .text	00000000 __aeabi_read_tp
20003610 g     O .bss	00000024 SYSTEM_threadsRunningEvent
0803ebf4  w    F .text	00000000 frexp(float, int*)
a0000000 g       *ABS*	00000000 __FSMC_segment_start__
08022ba4 g     F .text	0000000a Robot::getAxisMechanicalRatio(ROBOT_axisIndex_t)
08020228  w    F .init	00000000 SPI5_IRQHandler
20012400 g     O .bss	0000004c sram_mutex
0804efac g       *ABS*	00000000 __tdata_load_end__
080201fc  w    F .init	00000000 TIM7_IRQHandler
20012248 g     O .bss	00000004 _tx_mutex_performance_timeout_count
d0000000 g       *ABS*	00000000 __SDRAM2_segment_end__
0802e3a8 g     F .text	00000048 UTILITIES_pushRingBuff
08023da4 g     F .text	000001c8 CCP_init
080251fc g     F .text	00000002 DIAGNOSTIC_endianSwapReadSensorStateCommand(COMM_DIAGNOSTIC_getSensorState_t*)
0803f76c g     F .text	00000000 __cxa_end_cleanup
00010000 g       *ABS*	00000000 __SRAM3_segment_size__
08022c94 g     F .text	00000014 Robot::estimateMoveTime(ROBOT_axisIndex_t, float, AXIS_mode_t)
080201b0  w    F .init	00000000 MemManage_Handler
08041048  w    F .text	0000020c .hidden libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm>::getInfoFromEHABISection(unsigned int, libunwind::UnwindInfoSections const&)
08038dde  w    F .text	00000000 EXTI0_IRQHandler
08032b6c g     F .text	0000008c UPG_MNGR_sendDataBlock
08027b50 g     F .text	000000a0 ACTIONS_reset(bool, ROBOT_axisIndex_t)
0803cf50 g     F .text	00000022 bmi2_get_status
1fffc008 g       *ABS*	00000000 __OPTION_segment_end__
0802e168 g     F .text	0000012c IMU_DRIVER_init
08030f9c g     F .text	0000010c BinManager::BinManager(BinSensor::State (*)(), BinSensor::State (*)(), BinSensor::State (*)(), BinSensor::State (*)(), void (*)(void*), void*, unsigned short)
0803b314 g     F .text	000000ac FLASH_EraseSector
0803f602  w    F .text	00000000 memcpy
0802d3a0 g     F .text	0000002a SOFTWARE_TIMER_setTimeout
2000355c g     O .bss	000000b4 SYSTEM_thread
0803d65c g     F .text	00000044 bmi2_get_gyro_cross_sense
200128f4 g       .heap	00000000 __heap_load_end__
0804caa8 g       *ABS*	00000000 __fast_load_end__
080317d8 g     F .text	0000005c NVM_viewStats
08030b54 g     F .text	00000108 TorqueMonitor::sumTorqueAboveAverageThreshold(int)
08024bb0 g     F .text	000000c8 BSB_getFwVersion
20002454 g     O .data	00000006 _nx_driver_hardware_address
200124f4 g       .tdata_run	00000000 __tdata_start__
080209b0 g     F .text	00000148 NETWORK_writeUdp
08022b94 g     F .text	00000010 Robot::updateStatus(ROBOT_status_t)
20012254 g     O .bss	00000004 _tx_semaphore_created_count
20002500 g     O .data	00000004 __RAL_rand_next
08032ecc g     F .text	00000010 UPG_MNGR_setStatusMetaDataSent
0803e38a  w    F .text	00000000 __aeabi_l2f
20030000 g       *ABS*	00000000 __RAM_segment_end__
0802f09c g     F .text	00000030 CAMERA_setPixelCenterOffsets(int, int)
080377c0 g     F .text	00000042 _nx_ip_packet_deferred_receive
080201ea  w    F .init	00000000 RTC_Alarm_IRQHandler
0803a16c g     F .text	000001f0 _tx_thread_system_resume
0803e8b4  w    F .text	00000130 atanf
0802fe20 g     F .text	0000000c HARDWARE_NETWORK_getNumMCMMessagesToSend
20012228 g     O .bss	00000004 _tx_initialize_unused_memory
0803587c g     F .text	00000002 CAN2_TX_IRQ_Handler
0803d9f4 g     F .text	0000003a bmi2_extract_input_feat_config
0803f708  w    F .text	00000000 strlen
080273f4 g     F .text	000000a0 PLACE_BIN_RETRIES_runTask(PLACE_BIN_RETRIES_type_t, unsigned long, PLACE_BIN_config_t*, bool)
080313c0 g     F .text	00000098 NVM_createEntry
2000373c g     O .bss	000000b4 CLI_thread
0803aba8 g     F .text	000001cc CAN_Init
08039ec6 g     F .text	00000000 tx_thread_fpu_enable
0804caa8 g       *ABS*	00000000 __data_load_start__
08038e16  w    F .text	00000000 EXTI4_IRQHandler
40018000 g       *ABS*	00000000 __APB2_segment_end__
08038ea2  w    F .text	00000000 CAN1_RX1_IRQHandler
08038958 g     F .text	00000144 _nx_udp_socket_bind
08034c88 g     F .text	00000078 UART1_IRQ_handler
e0042000 g       *ABS*	00000000 __DBG_segment_start__
20000000 g       .data_run	00000000 __data_run_start__
0803f520  w    F .text	000000a6 strtol
080368c0 g     F .text	00000010 ETH_SoftwareReset
0803edb4 g     F .text	0000001a __RAL_pre_padding
0803bc34 g     F .text	00000070 SPI_Cmd
080241b4 g     F .text	00000014 CCP_getMirrorData
0803e492  w    F .text	00000000 __truncdfsf2
08030994 g     F .text	0000000a ProgressMonitor::update(unsigned char*, unsigned short)
0804102c g     F .text	00000010 unw_resume
0802bfbc g     F .text	00000012 TaskManager::runTask(unsigned int)
0803714c g     F .text	000000dc _nx_arp_packet_send
0803c9c0 g     F .text	00000018 COMM_BOOT_getErrorMsg
0803ebac  w    F .text	00000000 ldexp(float, int)
080251c8 g     F .text	00000002 DIAGNOSTIC_endianSwapStopMotorCommand(COMM_DIAGNOSTIC_stopMotor_t*)
2000de14 g     O .bss	00000344 framManager
0803e41e  w    F .text	00000000 __uint64_to_float32
0803ea3c  w    F .text	000000fc fmod(float, float)
08023474 g     F .text	00000046 SingleServoAxis::executeCommand(unsigned char, unsigned char*, unsigned short)
08022788 g     F .text	00000010 DEBUG_subtaskSend
20005208 g     O .bss	000000b4 TIME_thread
08030ae8 g     F .text	00000018 TorqueMonitor::~TorqueMonitor()
08038ecc  w    F .text	00000000 CAN2_SCE_IRQHandler
0803f76a  w    F .text	00000002 __printf_unlock
0803084c g     F .text	0000002c STO_setState
080242fc g     F .text	00000030 CCP_handleDataRequest
20002504 g     O .bss	00000024 NETWORK_events
080238c0 g     F .text	00000004 SingleStepperAxis::power(AXIS_powerState_t)
68000000 g       *ABS*	00000000 __NOR_PSRAM3_segment_start__
080369b0 g     F .text	0000003c ETH_DMATransmissionCmd
0803f8c8 g     F .text	0000001c .hidden std::__terminate(void (*)())
00000000 g       *ABS*	00000000 __tdata_run_size__
080310dc g     F .text	00000024 HardwareBinManager::readPosXPosY()
2000a2f0 g     O .bss	00000024 CANMNGR_events
200124f4 g       .tbss	00000000 __tbss_load_end__
64000000 g       *ABS*	00000000 __NOR_PSRAM2_segment_end__
08022bb0 g     F .text	00000034 Robot::getAxisIndex(unsigned char)
20004660 g     O .bss	0000004c ccpLogBufferLock
08024b60 g     F .text	00000050 BSB_sendDevMulticast
08033218 g     F .text	00000b60 UPG_MNGR_printOutStatistics
20009e98 g     O .bss	00000024 HARDWARE_NETWORK_eventFlags
08039954 g     F .text	0000023c _tx_mutex_put
0803ecfa g     F .text	00000024 __RAL_ascii_mbtowc
2000e158 g     O .bss	00000024 AWARENESS_events
08022d68 g     F .text	00000004 AxisBase::getName()
0802e8d0 g     F .text	00000238 CAMERA_init()
0802fe7c g     F .text	00000028 HARDWARE_NETWORK_dequeueReceivedMCMMessage
080412ac g     F .text	00000000 .hidden libunwind::Registers_arm::restoreVFPWithFLDMD(unsigned long long*)
0802f27c g     F .text	00000134 MessageManager::MessageManager(char const*, COMM_endianOrder_e, void (*)(unsigned char*, unsigned short), void (*)(), void (*)(), void (*)(), unsigned short, unsigned int, unsigned long long)
0802c744 g     F .text	00000098 SET_CONFIG_runTask(void*, unsigned long, bool)
0803e45a  w    F .text	00000000 __float32_to_float64
0804b838 g     O .rodata	00000033 bmi270_feat_in
200121f8 g     O .bss	00000004 _nx_packet_pool_created_ptr
20002364 g     O .data	00000004 g_pickarmAxis
08023b00 g     F .text	00000004 Articulation::Articulation(Articulation::State_e)
00200000 g       *ABS*	00000000 __FLASH_segment_size__
08036894 g     F .text	0000002c ETH_MACAddressConfig
0803e41e  w    F .text	00000000 __aeabi_ul2f
0802bce8 g     F .text	00000010 TaskStatus::TaskStatus(TaskStatus const&)
08031364 g     F .text	0000005c NVM_init